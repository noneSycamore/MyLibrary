{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Sycamore \u306e Library \u00b6","title":"Home"},{"location":"#welcome-to-sycamore-library","text":"","title":"Welcome to Sycamore \u306e Library"},{"location":"Math_modeling/Assignment%201/","text":"Assignment 1 \u00b6 One \u00b6 Please use the built-in MATLAB function ( dsolve ) to solve the $1^{st}$ order differential equation: $y\u2019(x) = xy$ . \u7528 eqn \u5b58\u50a8\u5fae\u5206\u65b9\u7a0b\u7684\u8868\u8fbe\u5f0f\uff0c\u76f4\u63a5\u7528 dsolve() \u51fd\u6570\u5f97\u5230\uff1a $y(x)= C1 \\times e^{\\frac{x^2}{2}}$ exp \uff1a matlab syms y(x) eqn = diff(y,x) == x*y; res = dsolve(eqn) Two \u00b6 Please solve the initial value problem, which is $y\u2019(x) = xy$ with $y(1) = 1$ . \u589e\u52a0\u53d8\u91cf con \uff0c\u5b58\u50a8 $y(1) = 1$ \uff0c\u4ee3\u5165 dsove() \u51fd\u6570\uff0c\u53ef\u4ee5\u6c42\u5f97\uff1a $y(x)= e^{-\\frac{1}{2}} \\times e^{\\frac{x^2}{2}}$ \u5373\uff0c $y(x)= e^{\\frac{x^2-1}{2}}$ exp \uff1a matlab syms y(x) eqn = diff(y,x) == x*y; con = y(1) == 1; y = dsolve(eqn,con) simy = simplify(y) Three \u00b6 Please solve the $2^{nd}$ order differential equation: $y\u2019\u2019(x) + 8y\u2019(x) + 2y(x) = cos(x)$ with $y(0) = 0$ and $y\u2019(0) = 1$ . \u4ee4 $y''(x) = Dy$ \uff0c $y'(x) = D2y$ \uff0c eqn \u5b58\u50a8\u4e8c\u9636\u5fae\u5206\u65b9\u7a0b\u7684\u8868\u8fbe\u5f0f\uff0c con1 \u548c con2 \u5206\u522b\u5b58\u50a8 $y(0) = 0$ \u548c $y\u2019(0) = 1$ \uff0c\u4ee3\u5165 dsove() \u51fd\u6570\uff0c\u6c42\u5f97\uff1a $y(x) = \\frac{1}{\\sqrt 65}sin(x + atan(\\frac{1}{8})) - \\frac{1}{1820}((14 - 53\\sqrt 14)e^{-(\\sqrt 14 + 4)x}+(-14 + 53\\sqrt 14)e^{(\\sqrt 14 - 4)x})$ exp \uff1a matlab syms y(x) Dy = diff(y,x); D2y = diff(Dy,x); eqn = D2y + 8 * Dy + 2 * y == cos(x); con1 = y(0) == 0; con2 = Dy(0) == 1; y = dsolve(eqn,con1,con2); simy = simplify(y) Four \u00b6 Please solve the numerical solution of the 1st ode: y\u2019(x)=xy^2+y with y(0) = 1 and the x domain is [0, 0.5]. Try to use ode23 (https://www.mathworks.com/help/matlab/ref/ode23.html) and ode45 (https://www.mathworks.com/help/matlab/ref/ode45.html) respectively and compare the numerical results. ode23 \uff1a\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ode45 \uff1a Compare \uff1a exp \uff1a matlab xdomain = [0 0.5]; y_0 = 1; [x1,y1] = ode23(@(x1,y1) x1*y1^2+y1, xdomain, y_0); [x2,y2] = ode45(@(x2,y2) x2*y2^2+y2, xdomain, y_0); figure(1); plot(x1,y1,'-o') legend('y_ode23') figure(2); plot(x2,y2,'-.') legend('y_ode45') figure(3); plot(x1,y1,'-o',x2,y2,'-.') legend('y_ode23','y_ode45') Five \u00b6 Solve the system of Lorenz equations (You may find this page very helpful with MATLAB/Python code: https://en.wikipedia.org/wiki/Lorenz_system). (1) Discuss the system behavior under the constant values: sigma, rho, and beta; (2) Comment the robustness of the dynamical system under different conditions. $${\\begin{aligned}{\\frac {\\mathrm {d} x}{\\mathrm {d} t}}=\\sigma (y-x),\\ {\\frac {\\mathrm {d}y}{\\mathrm {d}t}}=x(\\rho -z)-y,\\ {\\frac {\\mathrm {d} z}{\\mathrm {d} t}} =xy-\\beta z.\\end{aligned}}$$ \u53c2\u6570 \u03c3 \u79f0\u4e3a\u666e\u5170\u7279\u6570\uff0c \u03c1 \u662f\u89c4\u8303\u5316\u7684\u745e\u5229\u6570\uff0c \u03b2 \u548c\u51e0\u4f55\u5f62\u72b6\u76f8\u5173 \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 13 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 160 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 28 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a exp \uff1a ```matlab sigma = 10; beta = 8/3; rho = 28; f = @(t,a) [-sigma a(1) + sigma a(2); rho a(1) - a(2) - a(1) a(3); -beta a(3) + a(1) a(2)]; [t,a] = ode45(f,[0 100],[1 1 1]); plot3(a(:,1),a(:,2),a(:,3)) ``` Six \u00b6 Consider Lotka-Volterra equations (https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations), which is known as predatory-prey equations: (1) Plot the phase portrait; (2) Compare the results using ode23 and ode45. Lotka-Volterra \u65b9\u7a0b\u662f\u7531\u4e24\u4e2a\u4e00\u9636\u975e\u7ebf\u6027 ODE \u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u7528\u4e8e\u63cf\u8ff0\u751f\u7269\u7cfb\u7edf\u4e2d\u6355\u98df\u8005\u548c\u730e\u7269\u7684\u79cd\u7fa4\u3002\u79cd\u7fa4\u6839\u636e\u4ee5\u4e0b\u65b9\u7a0b\u7ec4\u968f\u65f6\u95f4\u53d8\u5316\uff1a $$\\begin{cases}\\dfrac{dx}{dt} = \\alpha x - \\beta xy \\ \\dfrac{dy}{dt} = \\delta xy\u2212\\gamma y\\end{cases}$$ \u200b \u5176\u4e2d\uff0c x \u662f\u730e\u7269\u7684\u79cd\u7fa4\u5927\u5c0f\uff0c y \u662f\u6355\u98df\u8005\u7684\u79cd\u7fa4\u5927\u5c0f\uff0c t \u662f\u65f6\u95f4\uff0c \u03b1\u3001\u03b2\u3001\u03b4 \u548c \u03b3 \u662f\u63cf\u8ff0\u4e24\u4e2a\u7269\u79cd\u4e4b\u95f4\u4ea4\u4e92\u7684\u5e38\u91cf\u53c2\u6570\uff0c \u03b1 \u662f\u81ea\u7136\u589e\u957f\u7387\u3001\u03b2 \u662f\u81ea\u7136\u6b7b\u4ea1\u7387\uff0c \u03b3 \u662f\u730e\u7269\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u88ab\u730e\u98df\u8005\u6355\u83b7\u7684\u6bd4\u4f8b \u4ee4\uff1a $\u03b1=\u03b3=1\u3001\u03b2=0.01\u3001\u03b4=0.02$ \uff0c\u7f16\u5199\u51fd\u6570 Lotka.m \u5982\u4e0b\uff1a ```matlab function dpdt = Lotka(t,p) delta = 0.02; beta = 0.01; dpdt = [p(1) * (1 - beta p(2)); p(2) * (-1 + delta p(1))]; end ``` \u9488\u5bf9 \u4e0d\u540c \u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\uff0c\u5047\u5b9a\u730e\u7269 x \u7684\u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\u4fdd\u6301\u4e3a 50 \uff0c\u6539\u53d8\u6355\u98df\u8005 y \u7684\u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\uff0c\u5728\u533a\u95f4 $[10:400]$ \u53d8\u5316\uff0c\u7ed8\u5236\u76f8\u4f4d\u56fe\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; tfinal = 15; y0 = 10:10:400; for k = 1:length(y0) [t,p] = ode45(@Lotka,[t0 tfinal],[50 y0(k)]); plot(p(:,1),p(:,2)) hold on end title('Phase Plot of Predator/Prey Populations') xlabel('Prey') ylabel('Predators') hold off \u53d6\u79cd\u7fa4 x \uff0c y \u7684\u521d\u503c\u4e3a 50 \uff0c\u6bd4\u8f83 ode23 \u548c ode45 \u7684\u7ed3\u679c\uff0c\u5982\u4e0b\u56fe\uff1a \u653e\u5927\u67e5\u770b\uff0c ode45 \u7684\u66f2\u7ebf\u66f4\u52a0\u5706\u6ed1 exp \uff1a matlab t0 = 0; tfinal = 15; p0 = [50; 50]; [t,p1] = ode23(@Lotka,[t0 tfinal],p0); [t,p2] = ode45(@Lotka,[t0 tfinal],p0); plot(p1(:,1),p1(:,2),'-o', p2(:,1),p2(:,2),'-.') title('Phase Plot of Predator/Prey Populations') legend('ode23','ode45') xlabel('Prey') ylabel('Predators') Seven \u00b6 Consider Rossler attractor (https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor) with the defining equations, use MATLAB to develop the code to solve the Rossler attractor problem. The defining equations of the R\u00f6ssler system are \uff08\u7f57\u65af\u52d2\u7cfb\u7edf\u7684\u5b9a\u4e49\u65b9\u7a0b\u662f\uff1a\uff09 $$\\begin{cases}{\\frac {dx}{dt}}=-y-z \\end{cases}$$ $$\\begin{cases}{\\frac {dy}{dt}}=x+ay \\end{cases}$$ $$\\begin{cases}{\\frac {dz}{dt}}=b+z(x-c)\\end{cases}$$ \u9009\u62e9\u6807\u51c6\u53c2\u6570\u503c\uff0c\u4ee4 $a=0.2,b=0.2,c=5.7$ \uff0c\u7f16\u5199\u51fd\u6570 Rossler.m \u5982\u4e0b\uff1a ```matlab function dpdt = Rossler(t,p) a = 0.2; b = 0.2; c = 5.7; dpdt = [-p(2) - p(3); p(1) + a * p(2); b + p(3) * (p(1) - c);]; end ``` \u4ee4 x\u3001y\u3001z \u4e09\u8005\u7684\u521d\u503c\u4e3a 0 \uff0c\u89c2\u5bdf t \u5728\u533a\u95f4 $[0:400]$ \u4e0a\u7684\u53d8\u5316\uff0c\u5f97\u5230\u56fe\u50cf\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; p0 = [0 0 0]; tfinal = 400; [t,p2] = ode45(@Rossler,[t0 tfinal],p0); plot3(p2(:,1),p2(:,2),p2(:,3)) \u4fdd\u6301 y\u3001z \u7684\u521d\u503c\u4e0d\u53d8\uff0c t \u5219\u9650\u5b9a\u5728\u533a\u95f4 $[0:10]$ \u4e0a\uff0c\u53d8\u5316 x \u7684\u521d\u503c\uff0c\u4f7f\u5176\u5728\u533a\u95f4 $[0:100]$ \u4e0a\u53d8\u5316\uff0c\u6bcf\u9694 10 \u8bb0\u5f55\u4e0b\u53d8\u5316\u65f6\u5f97\u5230\u7684\u66f2\u7ebf\uff0c\u5f97\u5230\u56fe\u50cf\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; tfinal = 10; x0 = 0:10:100; figure(1); for k = 1:length(x0) [t,p1] = ode45(@Rossler,[t0 tfinal],[x0(k) 0 0]); plot3(p1(:,1),p1(:,2),p1(:,3)) hold on end xlabel('X') ylabel('Y') zlabel('Z') hold off \u4fdd\u6301\u5e38\u6570 $b=0.2\u3001c=5.7$ \uff0c\u66f4\u6539 a \u7684\u503c\u4e3a 3.8 \u548c 0.05 \uff0c\u89c2\u5bdf\u5230\uff0c $a=0.05$ \u65f6\uff0c\u51fd\u6570\u56fe\u50cf\u6536\u655b\u5230\u4e2d\u5fc3\uff0c $a=3.8$ \u65f6\uff0c\u660e\u663e\u7ebf\u6761\u53d8\u5f97\u66f4\u52a0\u6df7\u4e71\uff1a $a=0.05$ \uff1a $a=3.8$ \uff1a window.MathJax = { tex: { inlineMath: [['$', '$'], ['\\\\(', '\\\\)']], displayMath: [[\"$$\", \"$$\"], ['\\\\[', '\\\\]']], packages: { '[+]': ['mhchem'] } }, loader: { load: ['[tex]/mhchem'] }, }","title":"Math_modeling"},{"location":"Math_modeling/Assignment%201/#assignment-1","text":"","title":"Assignment 1"},{"location":"Math_modeling/Assignment%201/#one","text":"Please use the built-in MATLAB function ( dsolve ) to solve the $1^{st}$ order differential equation: $y\u2019(x) = xy$ . \u7528 eqn \u5b58\u50a8\u5fae\u5206\u65b9\u7a0b\u7684\u8868\u8fbe\u5f0f\uff0c\u76f4\u63a5\u7528 dsolve() \u51fd\u6570\u5f97\u5230\uff1a $y(x)= C1 \\times e^{\\frac{x^2}{2}}$ exp \uff1a matlab syms y(x) eqn = diff(y,x) == x*y; res = dsolve(eqn)","title":"One"},{"location":"Math_modeling/Assignment%201/#two","text":"Please solve the initial value problem, which is $y\u2019(x) = xy$ with $y(1) = 1$ . \u589e\u52a0\u53d8\u91cf con \uff0c\u5b58\u50a8 $y(1) = 1$ \uff0c\u4ee3\u5165 dsove() \u51fd\u6570\uff0c\u53ef\u4ee5\u6c42\u5f97\uff1a $y(x)= e^{-\\frac{1}{2}} \\times e^{\\frac{x^2}{2}}$ \u5373\uff0c $y(x)= e^{\\frac{x^2-1}{2}}$ exp \uff1a matlab syms y(x) eqn = diff(y,x) == x*y; con = y(1) == 1; y = dsolve(eqn,con) simy = simplify(y)","title":"Two"},{"location":"Math_modeling/Assignment%201/#three","text":"Please solve the $2^{nd}$ order differential equation: $y\u2019\u2019(x) + 8y\u2019(x) + 2y(x) = cos(x)$ with $y(0) = 0$ and $y\u2019(0) = 1$ . \u4ee4 $y''(x) = Dy$ \uff0c $y'(x) = D2y$ \uff0c eqn \u5b58\u50a8\u4e8c\u9636\u5fae\u5206\u65b9\u7a0b\u7684\u8868\u8fbe\u5f0f\uff0c con1 \u548c con2 \u5206\u522b\u5b58\u50a8 $y(0) = 0$ \u548c $y\u2019(0) = 1$ \uff0c\u4ee3\u5165 dsove() \u51fd\u6570\uff0c\u6c42\u5f97\uff1a $y(x) = \\frac{1}{\\sqrt 65}sin(x + atan(\\frac{1}{8})) - \\frac{1}{1820}((14 - 53\\sqrt 14)e^{-(\\sqrt 14 + 4)x}+(-14 + 53\\sqrt 14)e^{(\\sqrt 14 - 4)x})$ exp \uff1a matlab syms y(x) Dy = diff(y,x); D2y = diff(Dy,x); eqn = D2y + 8 * Dy + 2 * y == cos(x); con1 = y(0) == 0; con2 = Dy(0) == 1; y = dsolve(eqn,con1,con2); simy = simplify(y)","title":"Three"},{"location":"Math_modeling/Assignment%201/#four","text":"Please solve the numerical solution of the 1st ode: y\u2019(x)=xy^2+y with y(0) = 1 and the x domain is [0, 0.5]. Try to use ode23 (https://www.mathworks.com/help/matlab/ref/ode23.html) and ode45 (https://www.mathworks.com/help/matlab/ref/ode45.html) respectively and compare the numerical results. ode23 \uff1a\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003ode45 \uff1a Compare \uff1a exp \uff1a matlab xdomain = [0 0.5]; y_0 = 1; [x1,y1] = ode23(@(x1,y1) x1*y1^2+y1, xdomain, y_0); [x2,y2] = ode45(@(x2,y2) x2*y2^2+y2, xdomain, y_0); figure(1); plot(x1,y1,'-o') legend('y_ode23') figure(2); plot(x2,y2,'-.') legend('y_ode45') figure(3); plot(x1,y1,'-o',x2,y2,'-.') legend('y_ode23','y_ode45')","title":"Four"},{"location":"Math_modeling/Assignment%201/#five","text":"Solve the system of Lorenz equations (You may find this page very helpful with MATLAB/Python code: https://en.wikipedia.org/wiki/Lorenz_system). (1) Discuss the system behavior under the constant values: sigma, rho, and beta; (2) Comment the robustness of the dynamical system under different conditions. $${\\begin{aligned}{\\frac {\\mathrm {d} x}{\\mathrm {d} t}}=\\sigma (y-x),\\ {\\frac {\\mathrm {d}y}{\\mathrm {d}t}}=x(\\rho -z)-y,\\ {\\frac {\\mathrm {d} z}{\\mathrm {d} t}} =xy-\\beta z.\\end{aligned}}$$ \u53c2\u6570 \u03c3 \u79f0\u4e3a\u666e\u5170\u7279\u6570\uff0c \u03c1 \u662f\u89c4\u8303\u5316\u7684\u745e\u5229\u6570\uff0c \u03b2 \u548c\u51e0\u4f55\u5f62\u72b6\u76f8\u5173 \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 13 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 160 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a \u4ee4 sigma = 10 \uff0c beta = 8/3 \uff0c rho = 28 \uff0c\u83b7\u5f97\u56fe\u50cf\uff1a exp \uff1a ```matlab sigma = 10; beta = 8/3; rho = 28; f = @(t,a) [-sigma a(1) + sigma a(2); rho a(1) - a(2) - a(1) a(3); -beta a(3) + a(1) a(2)]; [t,a] = ode45(f,[0 100],[1 1 1]); plot3(a(:,1),a(:,2),a(:,3)) ```","title":"Five"},{"location":"Math_modeling/Assignment%201/#six","text":"Consider Lotka-Volterra equations (https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations), which is known as predatory-prey equations: (1) Plot the phase portrait; (2) Compare the results using ode23 and ode45. Lotka-Volterra \u65b9\u7a0b\u662f\u7531\u4e24\u4e2a\u4e00\u9636\u975e\u7ebf\u6027 ODE \u7ec4\u6210\u7684\u65b9\u7a0b\u7ec4\uff0c\u7528\u4e8e\u63cf\u8ff0\u751f\u7269\u7cfb\u7edf\u4e2d\u6355\u98df\u8005\u548c\u730e\u7269\u7684\u79cd\u7fa4\u3002\u79cd\u7fa4\u6839\u636e\u4ee5\u4e0b\u65b9\u7a0b\u7ec4\u968f\u65f6\u95f4\u53d8\u5316\uff1a $$\\begin{cases}\\dfrac{dx}{dt} = \\alpha x - \\beta xy \\ \\dfrac{dy}{dt} = \\delta xy\u2212\\gamma y\\end{cases}$$ \u200b \u5176\u4e2d\uff0c x \u662f\u730e\u7269\u7684\u79cd\u7fa4\u5927\u5c0f\uff0c y \u662f\u6355\u98df\u8005\u7684\u79cd\u7fa4\u5927\u5c0f\uff0c t \u662f\u65f6\u95f4\uff0c \u03b1\u3001\u03b2\u3001\u03b4 \u548c \u03b3 \u662f\u63cf\u8ff0\u4e24\u4e2a\u7269\u79cd\u4e4b\u95f4\u4ea4\u4e92\u7684\u5e38\u91cf\u53c2\u6570\uff0c \u03b1 \u662f\u81ea\u7136\u589e\u957f\u7387\u3001\u03b2 \u662f\u81ea\u7136\u6b7b\u4ea1\u7387\uff0c \u03b3 \u662f\u730e\u7269\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u88ab\u730e\u98df\u8005\u6355\u83b7\u7684\u6bd4\u4f8b \u4ee4\uff1a $\u03b1=\u03b3=1\u3001\u03b2=0.01\u3001\u03b4=0.02$ \uff0c\u7f16\u5199\u51fd\u6570 Lotka.m \u5982\u4e0b\uff1a ```matlab function dpdt = Lotka(t,p) delta = 0.02; beta = 0.01; dpdt = [p(1) * (1 - beta p(2)); p(2) * (-1 + delta p(1))]; end ``` \u9488\u5bf9 \u4e0d\u540c \u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\uff0c\u5047\u5b9a\u730e\u7269 x \u7684\u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\u4fdd\u6301\u4e3a 50 \uff0c\u6539\u53d8\u6355\u98df\u8005 y \u7684\u521d\u59cb\u79cd\u7fa4\u5927\u5c0f\uff0c\u5728\u533a\u95f4 $[10:400]$ \u53d8\u5316\uff0c\u7ed8\u5236\u76f8\u4f4d\u56fe\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; tfinal = 15; y0 = 10:10:400; for k = 1:length(y0) [t,p] = ode45(@Lotka,[t0 tfinal],[50 y0(k)]); plot(p(:,1),p(:,2)) hold on end title('Phase Plot of Predator/Prey Populations') xlabel('Prey') ylabel('Predators') hold off \u53d6\u79cd\u7fa4 x \uff0c y \u7684\u521d\u503c\u4e3a 50 \uff0c\u6bd4\u8f83 ode23 \u548c ode45 \u7684\u7ed3\u679c\uff0c\u5982\u4e0b\u56fe\uff1a \u653e\u5927\u67e5\u770b\uff0c ode45 \u7684\u66f2\u7ebf\u66f4\u52a0\u5706\u6ed1 exp \uff1a matlab t0 = 0; tfinal = 15; p0 = [50; 50]; [t,p1] = ode23(@Lotka,[t0 tfinal],p0); [t,p2] = ode45(@Lotka,[t0 tfinal],p0); plot(p1(:,1),p1(:,2),'-o', p2(:,1),p2(:,2),'-.') title('Phase Plot of Predator/Prey Populations') legend('ode23','ode45') xlabel('Prey') ylabel('Predators')","title":"Six"},{"location":"Math_modeling/Assignment%201/#seven","text":"Consider Rossler attractor (https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor) with the defining equations, use MATLAB to develop the code to solve the Rossler attractor problem. The defining equations of the R\u00f6ssler system are \uff08\u7f57\u65af\u52d2\u7cfb\u7edf\u7684\u5b9a\u4e49\u65b9\u7a0b\u662f\uff1a\uff09 $$\\begin{cases}{\\frac {dx}{dt}}=-y-z \\end{cases}$$ $$\\begin{cases}{\\frac {dy}{dt}}=x+ay \\end{cases}$$ $$\\begin{cases}{\\frac {dz}{dt}}=b+z(x-c)\\end{cases}$$ \u9009\u62e9\u6807\u51c6\u53c2\u6570\u503c\uff0c\u4ee4 $a=0.2,b=0.2,c=5.7$ \uff0c\u7f16\u5199\u51fd\u6570 Rossler.m \u5982\u4e0b\uff1a ```matlab function dpdt = Rossler(t,p) a = 0.2; b = 0.2; c = 5.7; dpdt = [-p(2) - p(3); p(1) + a * p(2); b + p(3) * (p(1) - c);]; end ``` \u4ee4 x\u3001y\u3001z \u4e09\u8005\u7684\u521d\u503c\u4e3a 0 \uff0c\u89c2\u5bdf t \u5728\u533a\u95f4 $[0:400]$ \u4e0a\u7684\u53d8\u5316\uff0c\u5f97\u5230\u56fe\u50cf\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; p0 = [0 0 0]; tfinal = 400; [t,p2] = ode45(@Rossler,[t0 tfinal],p0); plot3(p2(:,1),p2(:,2),p2(:,3)) \u4fdd\u6301 y\u3001z \u7684\u521d\u503c\u4e0d\u53d8\uff0c t \u5219\u9650\u5b9a\u5728\u533a\u95f4 $[0:10]$ \u4e0a\uff0c\u53d8\u5316 x \u7684\u521d\u503c\uff0c\u4f7f\u5176\u5728\u533a\u95f4 $[0:100]$ \u4e0a\u53d8\u5316\uff0c\u6bcf\u9694 10 \u8bb0\u5f55\u4e0b\u53d8\u5316\u65f6\u5f97\u5230\u7684\u66f2\u7ebf\uff0c\u5f97\u5230\u56fe\u50cf\u5982\u4e0b\uff1a exp \uff1a matlab t0 = 0; tfinal = 10; x0 = 0:10:100; figure(1); for k = 1:length(x0) [t,p1] = ode45(@Rossler,[t0 tfinal],[x0(k) 0 0]); plot3(p1(:,1),p1(:,2),p1(:,3)) hold on end xlabel('X') ylabel('Y') zlabel('Z') hold off \u4fdd\u6301\u5e38\u6570 $b=0.2\u3001c=5.7$ \uff0c\u66f4\u6539 a \u7684\u503c\u4e3a 3.8 \u548c 0.05 \uff0c\u89c2\u5bdf\u5230\uff0c $a=0.05$ \u65f6\uff0c\u51fd\u6570\u56fe\u50cf\u6536\u655b\u5230\u4e2d\u5fc3\uff0c $a=3.8$ \u65f6\uff0c\u660e\u663e\u7ebf\u6761\u53d8\u5f97\u66f4\u52a0\u6df7\u4e71\uff1a $a=0.05$ \uff1a $a=3.8$ \uff1a window.MathJax = { tex: { inlineMath: [['$', '$'], ['\\\\(', '\\\\)']], displayMath: [[\"$$\", \"$$\"], ['\\\\[', '\\\\]']], packages: { '[+]': ['mhchem'] } }, loader: { load: ['[tex]/mhchem'] }, }","title":"Seven"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/","text":"python \u62fc\u56fe\u6e38\u620f\u7684\u5b9e\u73b0 \u00b6 \u524d\u8a00~ \u00b6 \u4e00\u4e2a\u62fc\u56fe\u6e38\u620f\uff0c\u505a\u5b8c\u4e4b\u540e\u611f\u89c9\uff0c\u529f\u80fd\u65b9\u9762\u548c\u6211\u7684\u9884\u671f\u8fd8\u662f\u57fa\u672c\u4e00\u6837\u7684 (\uffe3 _,\uffe3 ) \u5c31\u662f\uff0c\u8fd9\u4e2a\u7f8e\u5316\u505a\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u5c31\u5148\u8fd9\u6837\u4e86 \u311f( \u2594, \u2594 )\u310f \u7cfb\u7edf\u6982\u8ff0 \u00b6 \u76ee\u6807\u662f\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u652f\u6301\u9f20\u6807\u62d6\u52a8\u62fc\u56fe\u7684\u6e38\u620f\u8f6f\u4ef6 myPuzzle \uff0c \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u56fe\u7247\uff0c\u80fd\u591f\u81ea\u5b9a\u4e49\u5206\u5272\u7684\u6570\u91cf\uff08\u5c31\u6bd4\u5982 3*3 \u7684\u4e5d\u5bab\u683c\u4e4b\u7c7b\u7684\uff09\uff0c\u6253\u4e71\u987a\u5e8f\u4e4b\u540e\u653e\u7f6e\u5728\u4e0d\u540c\u7684\u56fe\u7247\u6846\u4e2d\uff0c\u7528\u6237\u4f7f\u7528\u9f20\u6807\u62d6\u52a8\u56fe\u7247\u6846\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u62fc\u56fe\uff0c \u8fd8\u52a0\u4e86\u4e00\u4e2a\u6311\u6218\u6a21\u5f0f \u7cfb\u7edf\u8bbe\u8ba1 \u00b6 \u5177\u4f53\u529f\u80fd\u5982\u4e0b\uff1a 1.\u81ea\u7531\u9009\u62e9\u6253\u7b97\u8fdb\u884c\u62fc\u56fe\u6e38\u620f\u7684\u56fe\u7247\u3002 2.\u81ea\u5b9a\u4e49\u5206\u5272\u56fe\u7247\u7684\u6570\u91cf\u3002 3.\u6253\u4e71\u5206\u5272\u540e\u7684\u56fe\u7247\u5e76\u91cd\u65b0\u6392\u5217\u5728\u56fe\u7247\u6846\u5185\u3002 4.\u5b9e\u73b0\u7528\u9f20\u6807\u62d6\u52a8\u56fe\u7247\u6765\u4ea4\u6362\u56fe\u7247\u987a\u5e8f\uff0c\u8fbe\u5230\u62fc\u56fe\u7684\u76ee\u7684\u3002 5.\u80fd\u67e5\u770b\u539f\u56fe\u3002 6.\u53ef\u4ee5\u9009\u62e9\u91cd\u65b0\u5f00\u59cb\u3002 7.\u6dfb\u52a0\u6311\u6218\u6a21\u5f0f\uff0c\u5728\u5012\u8ba1\u65f6\u7ed3\u675f\u524d\u5b8c\u6210\u62fc\u56fe\u3002 8.\u80fd\u5b9e\u65f6\u663e\u793a\u62fc\u56fe\u6240\u82b1\u7684\u6b65\u9aa4 \u4e00\u4e9b\u5c0f\u6539\u52a8 \uff1a 1.\u62d6\u52a8\u7684\u56fe\u7247\u4e0d\u4f1a\u8d85\u8fc7\u539f\u56fe\u8fb9\u754c\u663e\u793a\uff0c\u8d85\u51fa\u5219\u6b65\u6570+1 2.\u9009\u4e2d\u7684\u56fe\u7247\u5c06\u968f\u9f20\u6807\u79fb\u52a8\uff0c\u4e14\u5904\u4e8e\u5176\u4ed6\u56fe\u7247\u7684\u4e0a\u65b9\u663e\u793a 3.\u4fee\u6539\u4e86 \u91cd\u65b0\u5f00\u59cb \u529f\u80fd\u7684\u4e00\u4e2a\u5c0f bug. \u8fd0\u884c\u754c\u9762 \u00b6 \u90e8\u5206\u7b80\u5355\u7684\u753b\u9762\u5c31\u7565\u53bb\u5566\uff0c\u6d88\u606f\u6846\u5565\u7684\u8fd9\u91cc\u4e5f\u6ca1\u52a0\u4e0a\uff08\u592a\u591a\u4e86\uff09 1.\u9ed8\u8ba4\u5206\u5272\u5b8c\u7684\u56fe\u7247 2.\u53f3\u4fa7\u7684\u9009\u9879 3.\u6253\u5f00\u6587\u4ef6\u7684\u753b\u9762 4.\u81ea\u7531\u9009\u62e9\u5206\u5272\u7684\u96be\u5ea6\uff0c\uff08\u4e0a\u9650\u4e3a 8 \uff09 5.\u6311\u6218\u6a21\u5f0f \u4ee3\u7801\u5b9e\u73b0 \u00b6 # -*- coding: UTF-8 -*- from tkinter import * from tkinter import filedialog, messagebox from PIL import Image, ImageTk import random root=Tk(\"myPuzzle\") root.title(\"myPuzzle\") root.geometry('1500x800') cv=Canvas(root,bg=\"white\",width=800,height=800) Label1=Label(root,text=\"0\",fg=\"red\",font = ('\u9ed1\u4f53',25)) time_left = 60 depth=3 steps=0 board=[[0,1,2],[3,4,5],[6,7,8]] suffixs = ['png','jpg','jpeg'] index_list=[] Pics=[] Pic_path = \"R.jpg\" #\u9ed8\u8ba4\u8def\u5f84 im = Image.open(Pic_path) # \u8bfb\u53d6\u56fe\u7247 width, height= im.size wid = width #\u4fdd\u5b58\u539f\u56fe\u6570\u636e\u5e76\u4fee\u6539\u5927\u5c0f hei = height im = im.resize((int(wid*0.18*depth), int(hei*0.18*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) clickID=-1 #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8\u53c2\u6570 class Square: def __init__(self,ID): self.ID=ID def draw(self,canvas,board_pos): img=tkImage_list[self.ID] canvas.create_image(board_pos,image=img) def load(): global pic_radio, depth_var Label(root,text=\"\u8bf7\u9009\u62e9\u6e38\u620f\u96be\u5ea6:\",font = ('\u9ed1\u4f53',15),).place(x=800,y=40+20)#int(w*depth/2.6) open_file = Button(root,text='\u6253\u5f00\u56fe\u7247(\u9ed8\u8ba4R.jpg)', height=2,\\ font = ('\u9ed1\u4f53',15), command = open_pic).place(x=int(w*0.87)+800,y=0) depth_var = StringVar() Label(root,text=\"\u81ea\u5b9a\u4e49\u5207\u5272\u8fb9\u6570:\",font = ('\u9ed1\u4f53',15)).place(x=800,y=70+25) Label(root,text=\"(0 < \u8fb9\u6570 < 9)\",font = ('\u9ed1\u4f53',14),).place(x=800,y=95+25) Entry(root, textvariable=depth_var).place(x=int(w*0.9)+800,y=75+25,height=40,width=190) Button(root,text='\u786e\u5b9a', font = ('\u9ed1\u4f53',15), width = 16, command = newdepth)\\ .place(x=int(w*2.01)+800,y=70+25,height=50,width=180) pic_radio = IntVar() pic_radio.set(3) radio1 = Radiobutton(root, text='\u56db\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value = 2,variable = pic_radio,command = catch).place(x=int(w/1.05)+800,y=40+20) radio2 = Radiobutton(root,text ='\u4e5d\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value=3,variable = pic_radio,command = catch).place(x=int(w*1.60)+800,y=40+20) radio3 = Radiobutton(root, text='\u5341\u516d\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value=4,variable=pic_radio,command = catch).place(x=int(w*2.27)+800,y=40+20) Button(root,text=\"\u91cd\u65b0\u5f00\u59cb\",command=game_loop,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=170,height=50,width=180) Label(root,text=\"Steps:\",font = ('\u9ed1\u4f53',22)).place(x=int(w*0.02)+800,y=13) Button(root,text=\"\u67e5\u770b\u539f\u56fe\",command=show_image,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=320,height=50,width=180) Button(root,text=\"\u6311\u6218\u6a21\u5f0f\",command=challenge,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=470,height=50,width=180) def open_pic(): global Pic_path file_path = filedialog.askopenfilename() if file_path: suffix = file_path.split('.')[1] if suffix in suffixs: Pic_path = file_path messagebox.showwarning('\u5b8c\u6210','\u5df2\u6253\u5f00\uff01\u8bf7\u9009\u62e9\u6e38\u620f\u96be\u5ea6') else: messagebox.showwarning('\u8b66\u544a','\u8bf7\u9009\u62e9\u56fe\u7247\u6587\u4ef6') else: messagebox.showwarning('\u53cb\u60c5\u63d0\u793a','\u6587\u4ef6\u8def\u5f84\u9519\u8bef\uff0c\u6216\u6ca1\u6709\u6253\u5f00\u6587\u4ef6') game_loop() def newdepth(): global depth, w, h, tkImage_list, index_list, im, width, height, board, steps board = [] steps = 0 Label1[\"text\"]=str(steps) tkImage_list = [] index_list = [] depth = int(depth_var.get()) if(depth > 8): messagebox.showwarning('\u8b66\u544a','\u96be\u5ea6\u8fc7\u5927\uff0c\u5207\u5272\u6570\u4e0a\u9650\u4e3a8\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e~') return if(depth < 1): messagebox.showwarning('\u8b66\u544a','\u5207\u5272\u6570\u4e0d\u80fd\u5c0f\u4e8e1~') im = Image.open(Pic_path) im = im.resize((int(wid*0.1*depth), int(hei*0.1*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) for i in range(depth): board.append([]) for j in range(depth): board[i].append(i * depth + j) cut_image(im) shuffle_list() for i in range(depth): for j in range(depth): idx=i*depth+j ID=index_list[idx] board[i][j]=Square(ID) show_image_list() def catch(): global depth, w, h, tkImage_list, index_list, im, width, height, board, steps board = [] steps = 0 Label1[\"text\"]=str(steps) tkImage_list = [] index_list = [] depth = int(pic_radio.get()) im = Image.open(Pic_path) im = im.resize((int(wid*0.1*depth), int(hei*0.1*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) for i in range(depth): board.append([]) for j in range(depth): board[i].append(i * depth + j) cut_image(im) shuffle_list() for i in range(depth): for j in range(depth): idx=i*depth+j ID=index_list[idx] board[i][j]=Square(ID) show_image_list() def cut_image(Pic): global tkImage_list for i in range(depth): for j in range(depth): box = (w * j, h * i, w * (j + 1), h * (i + 1)) # \u9700\u8981\u5207\u5272\u7684\u77e9\u5f62\u533a\u57df image = Pic.crop(box) tkImage_list.append(ImageTk.PhotoImage(image)) index_list.append(i * depth + j) # \u5206\u5272\u56fe\u7247\u5e76\u5b58\u8fdbtkImage_list\u4e2d def shuffle_list(): global index_list reverseCount = 0 random.shuffle(index_list) for i in range(len(index_list)): for j in range(i): if index_list[i] < index_list[j]: reverseCount += 1 # \u8ba1\u7b97\u9006\u5e8f\u6570 if reverseCount % 2 != 0: shuffle_list() def show_image_list(): # \u901a\u8fc7index_list\u5c55\u793aimage_list\u4e2d\u7684\u56fe\u7247 num = 0 for index in index_list: show_single_img(index, num) num += 1 def show_single_img(index, num): #\u6839\u636e\u7d22\u5f15\u5728\u4f4d\u7f6enum\u5904\u753b\u51fa\u5355\u5f20\u56fe\u7247 i = num//depth j = num % depth canvas=tkImage_list[index] board[i][j].draw(cv,(w*(j+0.5),h*(i+0.5))) def show_image(): root2=Toplevel(root) root2.title(\"\u539f\u56fe\") Img = Image.open(Pic_path) Img = Img.resize((int(wid*0.5), int(hei*0.5)), Image.ANTIALIAS) img = ImageTk.PhotoImage(Img) label_Img = Label(root2, image=img).pack() root2.mainloop() def challenge(): global Label2,time_radio,reset Label(root,text=\"\u8bf7\u5728\u5012\u8ba1\u65f6\u7ed3\u675f\u524d\u5b8c\u6210\u62fc\u56fe\uff01\",font = ('\u9ed1\u4f53',16)).place(x=int(w*0.05)+800,y=525) Label(root,text=\"\u8bf7\u9009\u62e9\u65f6\u95f4\uff1a\",font = ('\u9ed1\u4f53',17)).place(x=int(w*0.05)+800,y=550) time_radio = IntVar() time_radio.set(3) radio1 = Radiobutton(root, text='1 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=60,variable = time_radio,command = gettime).place(x=int(w*1.45)+800,y=550) radio2 = Radiobutton(root,text ='2 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=120,variable = time_radio,command = gettime).place(x=int(w*2.40)+800,y=550) radio3 = Radiobutton(root, text='3 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=180,variable=time_radio,command = gettime).place(x=int(w*3.3)+800,y=550) Label2=Label(root,text=str(time_left),fg=\"red\",font = ('\u9ed1\u4f53',25)) Label2.place(x=int(w*1.2)+800,y=608) Label(root,text=\"\u5012\u8ba1\u65f6:\",font = ('\u9ed1\u4f53',22)).place(x=int(w*0.05)+800,y=610) reset=0 Button(root,text=\"\u91cd\u7f6e\uff01\",command=getreset,font = ('\u9ed1\u4f53',15))\\ .place(x=int(w*1.95)+800,y=598,height=50,width=160) def gettime(): global reset if(reset==3): global l1,l2,l3 l1.place_forget() l2.place_forget() l3.place_forget() reset=0 n=int(time_radio.get()) cut_down(n) def getreset(): global reset reset=1 def cut_down(n): global Label2,time_radio,reset,l1,l2,l3 if n !=0: Label2['text'] = str(n) else: messagebox.showinfo(title=\"\u8b66\u544a\",message=\"\u65f6\u95f4\u5230\uff01\") root.after_cancel(id) n=n-1 id=root.after(1000,cut_down,n) if(reset==1): root.after_cancel(id) Label2['text'] = time_radio.get() reset=0 if(reset==2): root.after_cancel(id) l1=Label(root,text=\"\u6311\u6218\u6210\u529f\uff01\u4f60\u7684\u7528\u65f6\u4e3a\",font = ('\u9ed1\u4f53',18)) l1.place(x=int(w*0.05)+800,y=650) l2=Label(root,text=str(int(time_radio.get())-n-1),fg=\"red\",font = ('\u9ed1\u4f53',18)) l2.place(x=int(w*2.5)+800,y=650) l3=Label(root,text='s',font = ('\u9ed1\u4f53',18)) l3.place(x=int(w*2.9)+800,y=650) reset=3 def StartMove(event): global first_r,first_c,first_square first_r=int(event.y//h) first_c=int(event.x//w) if first_r<depth and first_c<depth: first_square=board[first_r][first_c] board[first_r][first_c].draw(cv,(w*(first_c+0.5),h*(first_r+0.5))) # \u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID allID=cv.find_closest(event.x,event.y) if len(allID) > 0: clickID=allID[0] first_x,first_y = event.x,event.y def StopMove(event): global steps,first_r,first_c,cur_r,cur_c,first_square,reset cur_r=int(event.y//h) cur_c=int(event.x//w) if cur_r<depth and cur_c<depth: current_square=board[cur_r][cur_c] board[cur_r][cur_c]=first_square board[first_r][first_c]=current_square steps+=1 Label1[\"text\"]=str(steps) cv.delete(\"all\") show_image_list() else: steps+=1 Label1[\"text\"]=str(steps) cv.delete(\"all\") show_image_list() if win(): reset=2 #\u91cd\u7f6e\u65f6\u95f4\u8bbe\u5b9a\u4e3a2\uff0c\u4ee3\u8868\u6210\u529f messagebox.showinfo(title=\"\u606d\u559c\",message=\"\u62fc\u56fe\u6210\u529f\uff01\") #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID cv.move(clickID,event.x-first_x,event.y-first_y) clickID=-1 def OnMotion(event): #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID if clickID!=-1: cv.move(clickID,event.x-first_x,event.y-first_y) first_x,first_y = event.x,event.y def win(): for i in range(depth): for j in range(depth): if board[i][j] is not None and board[i][j].ID!=i*depth+j: return False return True def game_loop(): global reset reset=1 cv.update() try: depth = int(depth_var.get()) newdepth() show_image_list() except: depth = int(pic_radio.get()) catch() show_image_list() def main(): load() Label1.place(x=int(w*0.55)+800,y=13) cv.bind(\"<ButtonPress-1>\",StartMove) #\u7ed1\u5b9a\u9f20\u6807\u5de6\u952e\u6309\u4e0b\u4e8b\u4ef6 cv.bind(\"<ButtonRelease-1>\",StopMove) #\u7ed1\u5b9a\u9f20\u6807\u5de6\u952e\u677e\u5f00\u4e8b\u4ef6 cv.bind(\"<B1-Motion>\", OnMotion) #\u7ed1\u5b9a\u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6 cv.place(x=0,y=0) game_loop() root.mainloop() if __name__ == '__main__': main()","title":"python \u62fc\u56fe\u6e38\u620f\u7684\u5b9e\u73b0"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#python","text":"","title":"python \u62fc\u56fe\u6e38\u620f\u7684\u5b9e\u73b0"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#_1","text":"\u4e00\u4e2a\u62fc\u56fe\u6e38\u620f\uff0c\u505a\u5b8c\u4e4b\u540e\u611f\u89c9\uff0c\u529f\u80fd\u65b9\u9762\u548c\u6211\u7684\u9884\u671f\u8fd8\u662f\u57fa\u672c\u4e00\u6837\u7684 (\uffe3 _,\uffe3 ) \u5c31\u662f\uff0c\u8fd9\u4e2a\u7f8e\u5316\u505a\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u5c31\u5148\u8fd9\u6837\u4e86 \u311f( \u2594, \u2594 )\u310f","title":"\u524d\u8a00~"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#_2","text":"\u76ee\u6807\u662f\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u652f\u6301\u9f20\u6807\u62d6\u52a8\u62fc\u56fe\u7684\u6e38\u620f\u8f6f\u4ef6 myPuzzle \uff0c \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u56fe\u7247\uff0c\u80fd\u591f\u81ea\u5b9a\u4e49\u5206\u5272\u7684\u6570\u91cf\uff08\u5c31\u6bd4\u5982 3*3 \u7684\u4e5d\u5bab\u683c\u4e4b\u7c7b\u7684\uff09\uff0c\u6253\u4e71\u987a\u5e8f\u4e4b\u540e\u653e\u7f6e\u5728\u4e0d\u540c\u7684\u56fe\u7247\u6846\u4e2d\uff0c\u7528\u6237\u4f7f\u7528\u9f20\u6807\u62d6\u52a8\u56fe\u7247\u6846\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u62fc\u56fe\uff0c \u8fd8\u52a0\u4e86\u4e00\u4e2a\u6311\u6218\u6a21\u5f0f","title":"\u7cfb\u7edf\u6982\u8ff0"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#_3","text":"\u5177\u4f53\u529f\u80fd\u5982\u4e0b\uff1a 1.\u81ea\u7531\u9009\u62e9\u6253\u7b97\u8fdb\u884c\u62fc\u56fe\u6e38\u620f\u7684\u56fe\u7247\u3002 2.\u81ea\u5b9a\u4e49\u5206\u5272\u56fe\u7247\u7684\u6570\u91cf\u3002 3.\u6253\u4e71\u5206\u5272\u540e\u7684\u56fe\u7247\u5e76\u91cd\u65b0\u6392\u5217\u5728\u56fe\u7247\u6846\u5185\u3002 4.\u5b9e\u73b0\u7528\u9f20\u6807\u62d6\u52a8\u56fe\u7247\u6765\u4ea4\u6362\u56fe\u7247\u987a\u5e8f\uff0c\u8fbe\u5230\u62fc\u56fe\u7684\u76ee\u7684\u3002 5.\u80fd\u67e5\u770b\u539f\u56fe\u3002 6.\u53ef\u4ee5\u9009\u62e9\u91cd\u65b0\u5f00\u59cb\u3002 7.\u6dfb\u52a0\u6311\u6218\u6a21\u5f0f\uff0c\u5728\u5012\u8ba1\u65f6\u7ed3\u675f\u524d\u5b8c\u6210\u62fc\u56fe\u3002 8.\u80fd\u5b9e\u65f6\u663e\u793a\u62fc\u56fe\u6240\u82b1\u7684\u6b65\u9aa4 \u4e00\u4e9b\u5c0f\u6539\u52a8 \uff1a 1.\u62d6\u52a8\u7684\u56fe\u7247\u4e0d\u4f1a\u8d85\u8fc7\u539f\u56fe\u8fb9\u754c\u663e\u793a\uff0c\u8d85\u51fa\u5219\u6b65\u6570+1 2.\u9009\u4e2d\u7684\u56fe\u7247\u5c06\u968f\u9f20\u6807\u79fb\u52a8\uff0c\u4e14\u5904\u4e8e\u5176\u4ed6\u56fe\u7247\u7684\u4e0a\u65b9\u663e\u793a 3.\u4fee\u6539\u4e86 \u91cd\u65b0\u5f00\u59cb \u529f\u80fd\u7684\u4e00\u4e2a\u5c0f bug.","title":"\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#_4","text":"\u90e8\u5206\u7b80\u5355\u7684\u753b\u9762\u5c31\u7565\u53bb\u5566\uff0c\u6d88\u606f\u6846\u5565\u7684\u8fd9\u91cc\u4e5f\u6ca1\u52a0\u4e0a\uff08\u592a\u591a\u4e86\uff09 1.\u9ed8\u8ba4\u5206\u5272\u5b8c\u7684\u56fe\u7247 2.\u53f3\u4fa7\u7684\u9009\u9879 3.\u6253\u5f00\u6587\u4ef6\u7684\u753b\u9762 4.\u81ea\u7531\u9009\u62e9\u5206\u5272\u7684\u96be\u5ea6\uff0c\uff08\u4e0a\u9650\u4e3a 8 \uff09 5.\u6311\u6218\u6a21\u5f0f","title":"\u8fd0\u884c\u754c\u9762"},{"location":"Python/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/#_5","text":"# -*- coding: UTF-8 -*- from tkinter import * from tkinter import filedialog, messagebox from PIL import Image, ImageTk import random root=Tk(\"myPuzzle\") root.title(\"myPuzzle\") root.geometry('1500x800') cv=Canvas(root,bg=\"white\",width=800,height=800) Label1=Label(root,text=\"0\",fg=\"red\",font = ('\u9ed1\u4f53',25)) time_left = 60 depth=3 steps=0 board=[[0,1,2],[3,4,5],[6,7,8]] suffixs = ['png','jpg','jpeg'] index_list=[] Pics=[] Pic_path = \"R.jpg\" #\u9ed8\u8ba4\u8def\u5f84 im = Image.open(Pic_path) # \u8bfb\u53d6\u56fe\u7247 width, height= im.size wid = width #\u4fdd\u5b58\u539f\u56fe\u6570\u636e\u5e76\u4fee\u6539\u5927\u5c0f hei = height im = im.resize((int(wid*0.18*depth), int(hei*0.18*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) clickID=-1 #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8\u53c2\u6570 class Square: def __init__(self,ID): self.ID=ID def draw(self,canvas,board_pos): img=tkImage_list[self.ID] canvas.create_image(board_pos,image=img) def load(): global pic_radio, depth_var Label(root,text=\"\u8bf7\u9009\u62e9\u6e38\u620f\u96be\u5ea6:\",font = ('\u9ed1\u4f53',15),).place(x=800,y=40+20)#int(w*depth/2.6) open_file = Button(root,text='\u6253\u5f00\u56fe\u7247(\u9ed8\u8ba4R.jpg)', height=2,\\ font = ('\u9ed1\u4f53',15), command = open_pic).place(x=int(w*0.87)+800,y=0) depth_var = StringVar() Label(root,text=\"\u81ea\u5b9a\u4e49\u5207\u5272\u8fb9\u6570:\",font = ('\u9ed1\u4f53',15)).place(x=800,y=70+25) Label(root,text=\"(0 < \u8fb9\u6570 < 9)\",font = ('\u9ed1\u4f53',14),).place(x=800,y=95+25) Entry(root, textvariable=depth_var).place(x=int(w*0.9)+800,y=75+25,height=40,width=190) Button(root,text='\u786e\u5b9a', font = ('\u9ed1\u4f53',15), width = 16, command = newdepth)\\ .place(x=int(w*2.01)+800,y=70+25,height=50,width=180) pic_radio = IntVar() pic_radio.set(3) radio1 = Radiobutton(root, text='\u56db\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value = 2,variable = pic_radio,command = catch).place(x=int(w/1.05)+800,y=40+20) radio2 = Radiobutton(root,text ='\u4e5d\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value=3,variable = pic_radio,command = catch).place(x=int(w*1.60)+800,y=40+20) radio3 = Radiobutton(root, text='\u5341\u516d\u5bab\u683c',font = ('\u9ed1\u4f53',15), \\ value=4,variable=pic_radio,command = catch).place(x=int(w*2.27)+800,y=40+20) Button(root,text=\"\u91cd\u65b0\u5f00\u59cb\",command=game_loop,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=170,height=50,width=180) Label(root,text=\"Steps:\",font = ('\u9ed1\u4f53',22)).place(x=int(w*0.02)+800,y=13) Button(root,text=\"\u67e5\u770b\u539f\u56fe\",command=show_image,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=320,height=50,width=180) Button(root,text=\"\u6311\u6218\u6a21\u5f0f\",command=challenge,font = ('\u9ed1\u4f53',15))\\ .place(x=800,y=470,height=50,width=180) def open_pic(): global Pic_path file_path = filedialog.askopenfilename() if file_path: suffix = file_path.split('.')[1] if suffix in suffixs: Pic_path = file_path messagebox.showwarning('\u5b8c\u6210','\u5df2\u6253\u5f00\uff01\u8bf7\u9009\u62e9\u6e38\u620f\u96be\u5ea6') else: messagebox.showwarning('\u8b66\u544a','\u8bf7\u9009\u62e9\u56fe\u7247\u6587\u4ef6') else: messagebox.showwarning('\u53cb\u60c5\u63d0\u793a','\u6587\u4ef6\u8def\u5f84\u9519\u8bef\uff0c\u6216\u6ca1\u6709\u6253\u5f00\u6587\u4ef6') game_loop() def newdepth(): global depth, w, h, tkImage_list, index_list, im, width, height, board, steps board = [] steps = 0 Label1[\"text\"]=str(steps) tkImage_list = [] index_list = [] depth = int(depth_var.get()) if(depth > 8): messagebox.showwarning('\u8b66\u544a','\u96be\u5ea6\u8fc7\u5927\uff0c\u5207\u5272\u6570\u4e0a\u9650\u4e3a8\uff0c\u8bf7\u91cd\u65b0\u8bbe\u7f6e~') return if(depth < 1): messagebox.showwarning('\u8b66\u544a','\u5207\u5272\u6570\u4e0d\u80fd\u5c0f\u4e8e1~') im = Image.open(Pic_path) im = im.resize((int(wid*0.1*depth), int(hei*0.1*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) for i in range(depth): board.append([]) for j in range(depth): board[i].append(i * depth + j) cut_image(im) shuffle_list() for i in range(depth): for j in range(depth): idx=i*depth+j ID=index_list[idx] board[i][j]=Square(ID) show_image_list() def catch(): global depth, w, h, tkImage_list, index_list, im, width, height, board, steps board = [] steps = 0 Label1[\"text\"]=str(steps) tkImage_list = [] index_list = [] depth = int(pic_radio.get()) im = Image.open(Pic_path) im = im.resize((int(wid*0.1*depth), int(hei*0.1*depth)), Image.ANTIALIAS) width, height = im.size w = int(width/depth) h = int(height/depth) for i in range(depth): board.append([]) for j in range(depth): board[i].append(i * depth + j) cut_image(im) shuffle_list() for i in range(depth): for j in range(depth): idx=i*depth+j ID=index_list[idx] board[i][j]=Square(ID) show_image_list() def cut_image(Pic): global tkImage_list for i in range(depth): for j in range(depth): box = (w * j, h * i, w * (j + 1), h * (i + 1)) # \u9700\u8981\u5207\u5272\u7684\u77e9\u5f62\u533a\u57df image = Pic.crop(box) tkImage_list.append(ImageTk.PhotoImage(image)) index_list.append(i * depth + j) # \u5206\u5272\u56fe\u7247\u5e76\u5b58\u8fdbtkImage_list\u4e2d def shuffle_list(): global index_list reverseCount = 0 random.shuffle(index_list) for i in range(len(index_list)): for j in range(i): if index_list[i] < index_list[j]: reverseCount += 1 # \u8ba1\u7b97\u9006\u5e8f\u6570 if reverseCount % 2 != 0: shuffle_list() def show_image_list(): # \u901a\u8fc7index_list\u5c55\u793aimage_list\u4e2d\u7684\u56fe\u7247 num = 0 for index in index_list: show_single_img(index, num) num += 1 def show_single_img(index, num): #\u6839\u636e\u7d22\u5f15\u5728\u4f4d\u7f6enum\u5904\u753b\u51fa\u5355\u5f20\u56fe\u7247 i = num//depth j = num % depth canvas=tkImage_list[index] board[i][j].draw(cv,(w*(j+0.5),h*(i+0.5))) def show_image(): root2=Toplevel(root) root2.title(\"\u539f\u56fe\") Img = Image.open(Pic_path) Img = Img.resize((int(wid*0.5), int(hei*0.5)), Image.ANTIALIAS) img = ImageTk.PhotoImage(Img) label_Img = Label(root2, image=img).pack() root2.mainloop() def challenge(): global Label2,time_radio,reset Label(root,text=\"\u8bf7\u5728\u5012\u8ba1\u65f6\u7ed3\u675f\u524d\u5b8c\u6210\u62fc\u56fe\uff01\",font = ('\u9ed1\u4f53',16)).place(x=int(w*0.05)+800,y=525) Label(root,text=\"\u8bf7\u9009\u62e9\u65f6\u95f4\uff1a\",font = ('\u9ed1\u4f53',17)).place(x=int(w*0.05)+800,y=550) time_radio = IntVar() time_radio.set(3) radio1 = Radiobutton(root, text='1 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=60,variable = time_radio,command = gettime).place(x=int(w*1.45)+800,y=550) radio2 = Radiobutton(root,text ='2 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=120,variable = time_radio,command = gettime).place(x=int(w*2.40)+800,y=550) radio3 = Radiobutton(root, text='3 \u5206\u949f',font = ('\u9ed1\u4f53',15), \\ value=180,variable=time_radio,command = gettime).place(x=int(w*3.3)+800,y=550) Label2=Label(root,text=str(time_left),fg=\"red\",font = ('\u9ed1\u4f53',25)) Label2.place(x=int(w*1.2)+800,y=608) Label(root,text=\"\u5012\u8ba1\u65f6:\",font = ('\u9ed1\u4f53',22)).place(x=int(w*0.05)+800,y=610) reset=0 Button(root,text=\"\u91cd\u7f6e\uff01\",command=getreset,font = ('\u9ed1\u4f53',15))\\ .place(x=int(w*1.95)+800,y=598,height=50,width=160) def gettime(): global reset if(reset==3): global l1,l2,l3 l1.place_forget() l2.place_forget() l3.place_forget() reset=0 n=int(time_radio.get()) cut_down(n) def getreset(): global reset reset=1 def cut_down(n): global Label2,time_radio,reset,l1,l2,l3 if n !=0: Label2['text'] = str(n) else: messagebox.showinfo(title=\"\u8b66\u544a\",message=\"\u65f6\u95f4\u5230\uff01\") root.after_cancel(id) n=n-1 id=root.after(1000,cut_down,n) if(reset==1): root.after_cancel(id) Label2['text'] = time_radio.get() reset=0 if(reset==2): root.after_cancel(id) l1=Label(root,text=\"\u6311\u6218\u6210\u529f\uff01\u4f60\u7684\u7528\u65f6\u4e3a\",font = ('\u9ed1\u4f53',18)) l1.place(x=int(w*0.05)+800,y=650) l2=Label(root,text=str(int(time_radio.get())-n-1),fg=\"red\",font = ('\u9ed1\u4f53',18)) l2.place(x=int(w*2.5)+800,y=650) l3=Label(root,text='s',font = ('\u9ed1\u4f53',18)) l3.place(x=int(w*2.9)+800,y=650) reset=3 def StartMove(event): global first_r,first_c,first_square first_r=int(event.y//h) first_c=int(event.x//w) if first_r<depth and first_c<depth: first_square=board[first_r][first_c] board[first_r][first_c].draw(cv,(w*(first_c+0.5),h*(first_r+0.5))) # \u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID allID=cv.find_closest(event.x,event.y) if len(allID) > 0: clickID=allID[0] first_x,first_y = event.x,event.y def StopMove(event): global steps,first_r,first_c,cur_r,cur_c,first_square,reset cur_r=int(event.y//h) cur_c=int(event.x//w) if cur_r<depth and cur_c<depth: current_square=board[cur_r][cur_c] board[cur_r][cur_c]=first_square board[first_r][first_c]=current_square steps+=1 Label1[\"text\"]=str(steps) cv.delete(\"all\") show_image_list() else: steps+=1 Label1[\"text\"]=str(steps) cv.delete(\"all\") show_image_list() if win(): reset=2 #\u91cd\u7f6e\u65f6\u95f4\u8bbe\u5b9a\u4e3a2\uff0c\u4ee3\u8868\u6210\u529f messagebox.showinfo(title=\"\u606d\u559c\",message=\"\u62fc\u56fe\u6210\u529f\uff01\") #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID cv.move(clickID,event.x-first_x,event.y-first_y) clickID=-1 def OnMotion(event): #\u56fe\u7247\u968f\u9f20\u6807\u79fb\u52a8 global first_x,first_y,clickID if clickID!=-1: cv.move(clickID,event.x-first_x,event.y-first_y) first_x,first_y = event.x,event.y def win(): for i in range(depth): for j in range(depth): if board[i][j] is not None and board[i][j].ID!=i*depth+j: return False return True def game_loop(): global reset reset=1 cv.update() try: depth = int(depth_var.get()) newdepth() show_image_list() except: depth = int(pic_radio.get()) catch() show_image_list() def main(): load() Label1.place(x=int(w*0.55)+800,y=13) cv.bind(\"<ButtonPress-1>\",StartMove) #\u7ed1\u5b9a\u9f20\u6807\u5de6\u952e\u6309\u4e0b\u4e8b\u4ef6 cv.bind(\"<ButtonRelease-1>\",StopMove) #\u7ed1\u5b9a\u9f20\u6807\u5de6\u952e\u677e\u5f00\u4e8b\u4ef6 cv.bind(\"<B1-Motion>\", OnMotion) #\u7ed1\u5b9a\u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6 cv.place(x=0,y=0) game_loop() root.mainloop() if __name__ == '__main__': main()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/","text":"python \u6587\u672c\u7f16\u8f91\u5668\u7684\u5b9e\u73b0 \u00b6 \u524d\u8a00 \u00b6 \u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u57fa\u672c\u529f\u80fd\u90fd\u6709\u4e86\uff0c\uff08\uffe3 \ufe36 \uffe3\uff09 \u2197\u3000 \u6700\u6ee1\u610f\u7684\u90e8\u5206\u662f\uff0c\u80fd\u663e\u793a\u884c\u53f7\uff0c\u52a0\u4e86\u5feb\u6377\u952e\uff0c\u8fd8\u6709\u67e5\u627e\u529f\u80fd\u7684\u5b9e\u73b0 (\u203e\u25e1\u25dd) emm... \u66f4\u6539\u4e3b\u9898\u7684\u529f\u80fd\u611f\u89c9\u4e5f\u4e0d\u9519\uff0c \u5c31\u662f\u611f\u89c9\uff0c\u81ea\u5df1\u641e\u7684\u6709\u70b9\u4e11\u3002\u3002\u3002<(\uff3f\u3000\uff3f)> \u7cfb\u7edf\u6982\u8ff0 \u00b6 \u76ee\u6807\u662f\u8bbe\u8ba1\u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u6587\u6863\u6587\u672c\u7f16\u8f91\u5668 SimpleMDIExample \uff0c \u53ef\u4ee5\u65b0\u5efa\u3001\u6253\u5f00\u3001\u4fdd\u5b58\u3001\u53e6\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1b \u53ef\u5bf9\u6587\u672c\u8fdb\u884c\u64a4\u9500\u3001\u6062\u590d\u3001\u526a\u8d34\u3001\u590d\u5236\u3001\u7c98\u8d34\u3001\u5168\u9009\u64cd\u4f5c\uff1b \u62e5\u6709\u67e5\u627e\u529f\u80fd\uff1b \u6dfb\u52a0\u5feb\u6377\u952e\u7684\u65b9\u5f0f\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\uff1b \u53ef\u4ee5\u9009\u62e9\u663e\u793a\u884c\u53f7\uff0c\u9ad8\u4eae\u5f53\u524d\u884c\u3001\u66f4\u6362\u7f16\u8f91\u5668\u4e3b\u9898\u3002 \u7cfb\u7edf\u8bbe\u8ba1 \u00b6 \u5177\u4f53\u529f\u80fd\u63cf\u8ff0\u5982\u4e0b\uff1a \u6253\u5f00\u5df2\u5b58\u5728\u6587\u6863 \uff1a\u53ef\u4ee5\u6253\u5f00\u6587\u672c\u6587\u6863\uff08\u4e0d\u9650 txt \u683c\u5f0f\uff09\uff0c\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u5c06\u5176\u663e\u793a\u5728\u6587\u672c\u6846\u4e2d\u3002 \u65b0\u5efa\u6587\u6863 \uff1a\u6807\u9898\u7f6e\u4e3a New \uff0c\u5e76\u5c06\u6587\u672c\u7f16\u8f91\u6846\u5904\u4e8e\u7a7a\u767d\u72b6\u6001\u3002 \u4fdd\u5b58 \uff08\u53e6\u5b58\u4e3a\uff09\u6587\u6863\uff1a\u5c06\u6587\u672c\u7f16\u8f91\u6846\u4e2d\u7684\u6587\u672c\u4fdd\u5b58\u5230\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u53ef\u8bbe\u7f6e\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u6587\u4ef6\u3002 \u64a4\u9500 \uff1a\u64a4\u53bb\u6587\u672c\u6846\u5185\u524d\u4e00\u6b65\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u6062\u590d \uff1a\u6062\u590d\u64a4\u53bb\u7684\u64cd\u4f5c\u3002 \u526a\u8d34 \uff1a\u5220\u53bb\u9009\u4e2d\u7684\u6587\u5b57\uff0c\u5e76\u590d\u5236\u9009\u4e2d\u7684\u6587\u5b57\u5230\u526a\u8d34\u677f\uff1b \u590d\u5236 \uff1a\u590d\u5236\u9009\u4e2d\u7684\u6587\u5b57\u5230\u526a\u8d34\u677f\uff1b \u7c98\u8d34 \uff1a\u5c06\u590d\u5236\u7684\u6587\u5b57\u7c98\u8d34\u5230\u6587\u672c\u6846\u5185\u5bf9\u5e94\u4f4d\u7f6e\uff1b \u5168\u9009 \uff1a\u9009\u4e2d\u6587\u672c\u6846\u5185\u5168\u90e8\u7684\u6587\u5b57 \u67e5\u627e \uff1a\u5728\u6587\u672c\u6846\u5185\u641c\u7d22\u8981\u67e5\u627e\u7684\u5b57\u7b26\uff08\u4e32\uff09\uff0c\u5e76\u53cd\u9988\u5b57\u7b26\uff08\u4e32\uff09\u4e2a\u6570\u4e14\u9ad8\u4eae\u6587\u672c\u6846\u5185\u67e5\u627e\u5230\u7684\u5b57\u7b26\uff08\u4e32\uff09\uff0c\u9000\u51fa\u67e5\u627e\u529f\u80fd\u540e\u9ad8\u4eae\u6d88\u5931\u3002 \u663e\u793a\u884c\u53f7 \uff1a\u6dfb\u52a0\u4fa7\u680f\uff0c\u8bb0\u5f55\u6587\u672c\u6846\u5185\u5df2\u6709\u6587\u5b57\u7684\u884c\u53f7\uff0c\u5b9e\u65f6\u66f4\u65b0\u3002 \u9ad8\u4eae\u5f53\u524d\u884c \uff1a\u9ad8\u4eae\u5149\u6807\u6240\u5728\u884c\uff0c\u5e76\u968f\u5149\u6807\u4e0a\u4e0b\u79fb\u52a8\u5b9e\u65f6\u6539\u53d8\u3002 \u66f4\u6362\u7f16\u8f91\u5668\u4e3b\u9898 \uff1a\u53ef\u4ee5\u66f4\u6362\u6587\u672c\u6846\u4ee5\u53ca\u4fa7\u8fb9\u680f\u7684\u80cc\u666f\u989c\u8272\u3002 \u754c\u9762\u8bbe\u8ba1 \u00b6 1.\u4e3b\u8981\u9875\u9762\uff1a 2.\u67e5\u627e\u7a97\u53e3\uff1a \u4ee3\u7801\u5b9e\u73b0 \u00b6 from tkinter import * from tkinter.ttk import Scrollbar from tkinter import filedialog, messagebox import os theme_color = { # line_bar,content 'Default': '#DCDCDC.#FFFAFA', 'lavender': '#F0F8FF.#E6E6FA', 'SlateGray': '#9FB6CD.#B9D3EE', 'Ivory': '#CDCDC1.#EEEEE0', 'Honeydew': '#C1CDC1.#E0EEE0', 'LavenderBlush': '#CDC1C5.#EEE0E5', } ICONS = ['new_file', 'open_file', 'save', 'undo', 'redo', 'cut', 'copy', 'paste', 'find_text'] icon_tmp=[] def Editor(root): # \u521b\u5efa\u83dc\u5355\u680f def create_menu(): global Show_number,Theme_choice,Highlight menu = Menu(root) File_menu = Menu(menu, tearoff=0) File_menu.add_command(label='\u65b0\u5efa', accelerator='Ctrl+N', command=New_file) File_menu.add_command(label='\u6253\u5f00', accelerator='Ctrl+O', command=Open_file) File_menu.add_command(label='\u4fdd\u5b58', accelerator='Ctrl+S', command=Save_file) File_menu.add_command(label='\u53e6\u5b58\u4e3a', accelerator='Shift+Ctrl+S', command=Save) File_menu.add_separator() File_menu.add_command(label='\u9000\u51fa', accelerator='Alt+F4', command=Exit) # \u6587\u4ef6\u83dc\u5355 menu.add_cascade(label='\u6587\u4ef6', menu=File_menu) Edit_menu = Menu(menu, tearoff=0) Edit_menu.add_command(label='\u64a4\u9500', accelerator='Ctrl+Z', command=lambda :Edit('\u64a4\u9500')) Edit_menu.add_command(label='\u6062\u590d', accelerator='Ctrl+Y / Shift+Ctrl+Z', command=lambda :Edit('\u6062\u590d')) Edit_menu.add_separator() Edit_menu.add_command(label='\u526a\u5207', accelerator='Ctrl+X', command=lambda :Edit('\u526a\u5207')) Edit_menu.add_command(label='\u590d\u5236', accelerator='Ctrl+C', command=lambda :Edit('\u590d\u5236')) Edit_menu.add_command(label='\u7c98\u8d34', accelerator='Ctrl+V', command=lambda :Edit('\u7c98\u8d34')) Edit_menu.add_separator() Edit_menu.add_command(label='\u67e5\u627e', accelerator='Ctrl+F', command=find_text) Edit_menu.add_separator() Edit_menu.add_command(label='\u5168\u9009', accelerator='Ctrl+A', command=All) menu.add_cascade(label='\u7f16\u8f91', menu=Edit_menu) # \u89c6\u56fe\u83dc\u5355 View_menu = Menu(menu, tearoff=0) Show_number = IntVar() Show_number.set(0) View_menu.add_checkbutton(label='\u663e\u793a\u884c\u53f7', variable=Show_number, command=If_update) Highlight = IntVar() Highlight.set(0) View_menu.add_checkbutton(label='\u9ad8\u4eae\u5f53\u524d\u884c', onvalue=1, offvalue=0, \\ variable=Highlight, command=Highlight_line) # \u89c6\u56fe\u5185\u521b\u5efa\u4e3b\u9898\u526f\u83dc\u5355 Themes_menu = Menu(menu, tearoff=0) View_menu.add_cascade(label='\u4e3b\u9898', menu=Themes_menu) Theme_choice = StringVar() Theme_choice.set('Default') for k in sorted(theme_color): Themes_menu.add_radiobutton(label=k, variable=Theme_choice, command=change_theme) menu.add_cascade(label='\u89c6\u56fe', menu=View_menu) root[\"menu\"] = menu # \u521b\u5efa\u5feb\u6377\u83dc\u5355\u680f def create_shortcut(): shortcut = Frame(root, height=25, background='#FDF5E6') shortcut.pack(fill='x') for i, icon in enumerate(ICONS): tool_icon = PhotoImage(file='img/%s.gif' % (icon,)) tool_botton = Button(shortcut, image=tool_icon, command=shortcut_action(icon)) tool_botton.pack(side='left') icon_tmp.append(tool_icon) def shortcut_action(types, event=None): def tmp(): if (types == \"new_file\"): New_file() elif (types == \"open_file\"): Open_file() elif (types == \"save\"): Save_file() elif (types == \"undo\"): content.event_generate(\"<<Undo>>\") elif (types == \"redo\"): content.event_generate(\"<<Redo>>\") elif (types == \"cut\"): content.event_generate(\"<<Cut>>\") elif (types == \"copy\"): content.event_generate(\"<<Copy>>\") elif (types == \"paste\"): content.event_generate(\"<<Paste>>\") elif (types == \"find_text\"): find_text() if (types != \"copy\" and type != \"save\"): If_update() return tmp # \u521b\u5efa\u6587\u672c\u6846\u5904\u7684\u4e3b\u8981\u90e8\u4ef6 def create_body(): global content,line_bar # \u521b\u5efa\u884c\u53f7\u680f line_bar = Text(root, width=3, padx=3, takefocus=0, border=0, background='#DCDCDC', state='disabled') line_bar.pack(side='left', fill='y') # \u521b\u5efa\u8f93\u5165\u6846 content = Text(root, wrap='none', background='#FFFAFA', undo=True) content.pack(expand='yes', fill='both') content.bind('<Control-N>', New_file) content.bind('<Control-n>', New_file) content.bind('<Control-O>', Open_file) content.bind('<Control-o>', Open_file) content.bind('<Control-S>', Save_file) content.bind('<Control-s>', Save_file) content.bind('<Control-A>', All) content.bind('<Control-a>', All) content.bind('<Control-f>', find_text) content.bind('<Control-F>', find_text) content.bind('<Shift-Control-Z>',lambda x:Edit('\u6062\u590d')) content.tag_configure('active_line', background='#EEEEE0') # \u521b\u5efa\u6eda\u52a8\u6761 scroll_barr = Scrollbar(content, orient=VERTICAL) scroll_barr[\"command\"] = content.yview content[\"yscrollcommand\"] = scroll_barr.set scroll_barr.pack(side='right', fill='y') scroll_barb = Scrollbar(content, orient=HORIZONTAL) scroll_barb[\"command\"] = content.xview content[\"xscrollcommand\"] = scroll_barb.set scroll_barb.pack(side='bottom', fill='x') def If_update(): global Show_number if(Show_number.get()): Update_linenum1() content.bind(\"<Return>\", lambda x: Update_linenum1()) else: Update_linenum2() content.bind(\"<Return>\", lambda x: Update_linenum2()) def Update_linenum1(): global line_bar row, col = content.index(\"end\").split('.') line_num_content = \"\\n\".join([str(i) for i in range(1, int(row)+1)]) line_bar.config(state='normal') line_bar.delete('1.0', 'end') line_bar.insert('1.0', line_num_content) line_bar.config(state='disabled') def Update_linenum2(): global line_bar line_bar.config(state='normal') line_bar.delete('1.0', 'end') line_bar.config(state='disabled') def Highlight_line(): global Highlight if (Highlight.get()): content.tag_remove(\"active_line\", 1.0, \"end\") content.tag_add(\"active_line\", \"insert linestart\", \"insert lineend+1c\") content.after(200, Highlight_line) # \u4e0d\u77e5\u9053\u54ea\u91cc\u6709\u95ee\u9898,\u8bbe\u4e86after200\uff0c\u6709\u65f6\u8fd8\u4f1a\u62a5\u8d85\u51fa\u9012\u5f52\u4e0a\u9650\u7684\u9519 else: content.tag_remove(\"active_line\", 1.0, \"end\") def New_file(event=None): global content,file_name root.title(\"New\") content.delete(1.0, END) file_name = None def Open_file(event=None): global file_name input_file = filedialog.askopenfilename( filetypes=[(\"\u6240\u6709\u6587\u4ef6\", \"*.*\"), (\"\u6587\u672c\u6587\u6863\", \"*.txt\")]) if (input_file): root.title(\"%s\" % os.path.basename(input_file)) file_name = input_file content.delete(1.0, END) with open(input_file, 'r', encoding='gb18030', errors='ignore') as _file: content.insert(1.0, _file.read()) If_update() def Save_file(event=None): global file_name try: if not file_name: Save() else: Write_file(file_name) except: messagebox.showwarning('\u8b66\u544a','\u627e\u4e0d\u5230\u4fdd\u5b58\u7684\u6587\u4ef6') def Save(): global file_name input_file = filedialog.asksaveasfilename( filetypes=[(\"All Files\", \"*.*\"), (\"\u6587\u672c\u6587\u6863\", \"*.txt\")]) if input_file: file_name = input_file Write_file(file_name) def Write_file(file_name): try: Content = content.get(1.0, 'end') with open(file_name, 'w') as the_file: the_file.write(Content) root.title(\"%s - Editor\" % os.path.basename(file_name)) except IOError: messagebox.showwarning(\"\u4fdd\u5b58\", \"\u4fdd\u5b58\u5931\u8d25\uff01\") def All( event=None): content.tag_add('sel', '1.0', 'end') return \"break\" def change_theme(): global Theme_choice selected_theme = Theme_choice.get() bg12 = theme_color.get(selected_theme) bg1_color, bg2_color = bg12.split('.') content.config(bg=bg2_color) line_bar.config(bg=bg1_color) def Exit(): if messagebox.askokcancel(\"\u9000\u51fa?\", \" \u786e\u5b9a\u9000\u51fa?\"): root.destroy() def Edit(types, event=None): if (types == \"\u64a4\u9500\"): content.event_generate(\"<<Undo>>\") elif (types == \"\u6062\u590d\"): content.event_generate(\"<<Redo>>\") elif (types == \"\u526a\u5207\"): content.event_generate(\"<<Cut>>\") elif (types == \"\u590d\u5236\"): content.event_generate(\"<<Copy>>\") elif (types == \"\u7c98\u8d34\"): content.event_generate(\"<<Paste>>\") if (types != \"\u590d\u5236\"): If_update() return \"break\" def find_text(event=None): Search = Toplevel(root) Search.title('\u67e5\u627e\u6587\u672c') Search.transient(root) Search.resizable(False, False) Label(Search, text=\"\u67e5\u627e\u5168\u90e8:\").grid(row=0, column=0, sticky='e') Search_widget = Entry(Search, width=25) Search_widget.grid(row=0, column=1, padx=2, pady=2, sticky='we') Search_widget.focus_set() Ignore_value = IntVar() Checkbutton(Search, text='\u5ffd\u7565\u5927\u5c0f\u5199', variable=Ignore_value) \\ .grid(row=1, column=1, sticky='e', padx=2, pady=2) Button(Search, text=\"\u67e5\u627e\", command= lambda : search_result(Search_widget.get(), Ignore_value.get(), Search, Search_widget)) \\ .grid(row=0, column=2, sticky='e' + 'w', padx=2, pady=2) # \u5173\u95ed\u67e5\u627e\u7a97\u53e3\u65f6\u6d88\u9664\u67e5\u627e\u5b57\u7b26\u7684\u5370\u8bb0 def Search_result_gone(): content.tag_remove('match', '1.0', \"end\") Search.destroy() Search.protocol('WM_DELETE_WINDOW', Search_result_gone) return \"break\" def search_result(key, ignore_case, Search, search_widget): content.tag_remove('match', '1.0', \"end\") found = 0 if key: start_pos = '1.0' while True: # nocase\uff1a\u5ffd\u7565\u5927\u5c0f\u5199 start_pos = content.search(key, start_pos, nocase=ignore_case, stopindex=\"end\") if not start_pos: break end_pos = '{}+{}c'.format(start_pos, len(key)) content.tag_add('match', start_pos, end_pos) found += 1 start_pos = end_pos content.tag_config('match', foreground='red', background='yellow') search_widget.focus_set() Search.title('\u5171\u53d1\u73b0%d\u4e2a' % found) root.protocol('WM_DELETE_WINDOW', Exit) create_menu() create_shortcut() create_body() root = Tk(\"SimpleMDIExample\") root.title(\"\u591a\u6587\u6863\u6587\u672c\u7f16\u8f91\u5668\") root.geometry('650x450') Editor(root) root.mainloop()","title":"python \u6587\u672c\u7f16\u8f91\u5668\u7684\u5b9e\u73b0"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#python","text":"","title":"python \u6587\u672c\u7f16\u8f91\u5668\u7684\u5b9e\u73b0"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_1","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u57fa\u672c\u529f\u80fd\u90fd\u6709\u4e86\uff0c\uff08\uffe3 \ufe36 \uffe3\uff09 \u2197\u3000 \u6700\u6ee1\u610f\u7684\u90e8\u5206\u662f\uff0c\u80fd\u663e\u793a\u884c\u53f7\uff0c\u52a0\u4e86\u5feb\u6377\u952e\uff0c\u8fd8\u6709\u67e5\u627e\u529f\u80fd\u7684\u5b9e\u73b0 (\u203e\u25e1\u25dd) emm... \u66f4\u6539\u4e3b\u9898\u7684\u529f\u80fd\u611f\u89c9\u4e5f\u4e0d\u9519\uff0c \u5c31\u662f\u611f\u89c9\uff0c\u81ea\u5df1\u641e\u7684\u6709\u70b9\u4e11\u3002\u3002\u3002<(\uff3f\u3000\uff3f)>","title":"\u524d\u8a00"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_2","text":"\u76ee\u6807\u662f\u8bbe\u8ba1\u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u6587\u6863\u6587\u672c\u7f16\u8f91\u5668 SimpleMDIExample \uff0c \u53ef\u4ee5\u65b0\u5efa\u3001\u6253\u5f00\u3001\u4fdd\u5b58\u3001\u53e6\u5b58\u4e3a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\uff1b \u53ef\u5bf9\u6587\u672c\u8fdb\u884c\u64a4\u9500\u3001\u6062\u590d\u3001\u526a\u8d34\u3001\u590d\u5236\u3001\u7c98\u8d34\u3001\u5168\u9009\u64cd\u4f5c\uff1b \u62e5\u6709\u67e5\u627e\u529f\u80fd\uff1b \u6dfb\u52a0\u5feb\u6377\u952e\u7684\u65b9\u5f0f\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\uff1b \u53ef\u4ee5\u9009\u62e9\u663e\u793a\u884c\u53f7\uff0c\u9ad8\u4eae\u5f53\u524d\u884c\u3001\u66f4\u6362\u7f16\u8f91\u5668\u4e3b\u9898\u3002","title":"\u7cfb\u7edf\u6982\u8ff0"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_3","text":"\u5177\u4f53\u529f\u80fd\u63cf\u8ff0\u5982\u4e0b\uff1a \u6253\u5f00\u5df2\u5b58\u5728\u6587\u6863 \uff1a\u53ef\u4ee5\u6253\u5f00\u6587\u672c\u6587\u6863\uff08\u4e0d\u9650 txt \u683c\u5f0f\uff09\uff0c\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u5c06\u5176\u663e\u793a\u5728\u6587\u672c\u6846\u4e2d\u3002 \u65b0\u5efa\u6587\u6863 \uff1a\u6807\u9898\u7f6e\u4e3a New \uff0c\u5e76\u5c06\u6587\u672c\u7f16\u8f91\u6846\u5904\u4e8e\u7a7a\u767d\u72b6\u6001\u3002 \u4fdd\u5b58 \uff08\u53e6\u5b58\u4e3a\uff09\u6587\u6863\uff1a\u5c06\u6587\u672c\u7f16\u8f91\u6846\u4e2d\u7684\u6587\u672c\u4fdd\u5b58\u5230\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u53ef\u8bbe\u7f6e\u4e3a\u4efb\u610f\u7c7b\u578b\u7684\u6587\u4ef6\u3002 \u64a4\u9500 \uff1a\u64a4\u53bb\u6587\u672c\u6846\u5185\u524d\u4e00\u6b65\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u6062\u590d \uff1a\u6062\u590d\u64a4\u53bb\u7684\u64cd\u4f5c\u3002 \u526a\u8d34 \uff1a\u5220\u53bb\u9009\u4e2d\u7684\u6587\u5b57\uff0c\u5e76\u590d\u5236\u9009\u4e2d\u7684\u6587\u5b57\u5230\u526a\u8d34\u677f\uff1b \u590d\u5236 \uff1a\u590d\u5236\u9009\u4e2d\u7684\u6587\u5b57\u5230\u526a\u8d34\u677f\uff1b \u7c98\u8d34 \uff1a\u5c06\u590d\u5236\u7684\u6587\u5b57\u7c98\u8d34\u5230\u6587\u672c\u6846\u5185\u5bf9\u5e94\u4f4d\u7f6e\uff1b \u5168\u9009 \uff1a\u9009\u4e2d\u6587\u672c\u6846\u5185\u5168\u90e8\u7684\u6587\u5b57 \u67e5\u627e \uff1a\u5728\u6587\u672c\u6846\u5185\u641c\u7d22\u8981\u67e5\u627e\u7684\u5b57\u7b26\uff08\u4e32\uff09\uff0c\u5e76\u53cd\u9988\u5b57\u7b26\uff08\u4e32\uff09\u4e2a\u6570\u4e14\u9ad8\u4eae\u6587\u672c\u6846\u5185\u67e5\u627e\u5230\u7684\u5b57\u7b26\uff08\u4e32\uff09\uff0c\u9000\u51fa\u67e5\u627e\u529f\u80fd\u540e\u9ad8\u4eae\u6d88\u5931\u3002 \u663e\u793a\u884c\u53f7 \uff1a\u6dfb\u52a0\u4fa7\u680f\uff0c\u8bb0\u5f55\u6587\u672c\u6846\u5185\u5df2\u6709\u6587\u5b57\u7684\u884c\u53f7\uff0c\u5b9e\u65f6\u66f4\u65b0\u3002 \u9ad8\u4eae\u5f53\u524d\u884c \uff1a\u9ad8\u4eae\u5149\u6807\u6240\u5728\u884c\uff0c\u5e76\u968f\u5149\u6807\u4e0a\u4e0b\u79fb\u52a8\u5b9e\u65f6\u6539\u53d8\u3002 \u66f4\u6362\u7f16\u8f91\u5668\u4e3b\u9898 \uff1a\u53ef\u4ee5\u66f4\u6362\u6587\u672c\u6846\u4ee5\u53ca\u4fa7\u8fb9\u680f\u7684\u80cc\u666f\u989c\u8272\u3002","title":"\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_4","text":"1.\u4e3b\u8981\u9875\u9762\uff1a 2.\u67e5\u627e\u7a97\u53e3\uff1a","title":"\u754c\u9762\u8bbe\u8ba1"},{"location":"Python/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_5","text":"from tkinter import * from tkinter.ttk import Scrollbar from tkinter import filedialog, messagebox import os theme_color = { # line_bar,content 'Default': '#DCDCDC.#FFFAFA', 'lavender': '#F0F8FF.#E6E6FA', 'SlateGray': '#9FB6CD.#B9D3EE', 'Ivory': '#CDCDC1.#EEEEE0', 'Honeydew': '#C1CDC1.#E0EEE0', 'LavenderBlush': '#CDC1C5.#EEE0E5', } ICONS = ['new_file', 'open_file', 'save', 'undo', 'redo', 'cut', 'copy', 'paste', 'find_text'] icon_tmp=[] def Editor(root): # \u521b\u5efa\u83dc\u5355\u680f def create_menu(): global Show_number,Theme_choice,Highlight menu = Menu(root) File_menu = Menu(menu, tearoff=0) File_menu.add_command(label='\u65b0\u5efa', accelerator='Ctrl+N', command=New_file) File_menu.add_command(label='\u6253\u5f00', accelerator='Ctrl+O', command=Open_file) File_menu.add_command(label='\u4fdd\u5b58', accelerator='Ctrl+S', command=Save_file) File_menu.add_command(label='\u53e6\u5b58\u4e3a', accelerator='Shift+Ctrl+S', command=Save) File_menu.add_separator() File_menu.add_command(label='\u9000\u51fa', accelerator='Alt+F4', command=Exit) # \u6587\u4ef6\u83dc\u5355 menu.add_cascade(label='\u6587\u4ef6', menu=File_menu) Edit_menu = Menu(menu, tearoff=0) Edit_menu.add_command(label='\u64a4\u9500', accelerator='Ctrl+Z', command=lambda :Edit('\u64a4\u9500')) Edit_menu.add_command(label='\u6062\u590d', accelerator='Ctrl+Y / Shift+Ctrl+Z', command=lambda :Edit('\u6062\u590d')) Edit_menu.add_separator() Edit_menu.add_command(label='\u526a\u5207', accelerator='Ctrl+X', command=lambda :Edit('\u526a\u5207')) Edit_menu.add_command(label='\u590d\u5236', accelerator='Ctrl+C', command=lambda :Edit('\u590d\u5236')) Edit_menu.add_command(label='\u7c98\u8d34', accelerator='Ctrl+V', command=lambda :Edit('\u7c98\u8d34')) Edit_menu.add_separator() Edit_menu.add_command(label='\u67e5\u627e', accelerator='Ctrl+F', command=find_text) Edit_menu.add_separator() Edit_menu.add_command(label='\u5168\u9009', accelerator='Ctrl+A', command=All) menu.add_cascade(label='\u7f16\u8f91', menu=Edit_menu) # \u89c6\u56fe\u83dc\u5355 View_menu = Menu(menu, tearoff=0) Show_number = IntVar() Show_number.set(0) View_menu.add_checkbutton(label='\u663e\u793a\u884c\u53f7', variable=Show_number, command=If_update) Highlight = IntVar() Highlight.set(0) View_menu.add_checkbutton(label='\u9ad8\u4eae\u5f53\u524d\u884c', onvalue=1, offvalue=0, \\ variable=Highlight, command=Highlight_line) # \u89c6\u56fe\u5185\u521b\u5efa\u4e3b\u9898\u526f\u83dc\u5355 Themes_menu = Menu(menu, tearoff=0) View_menu.add_cascade(label='\u4e3b\u9898', menu=Themes_menu) Theme_choice = StringVar() Theme_choice.set('Default') for k in sorted(theme_color): Themes_menu.add_radiobutton(label=k, variable=Theme_choice, command=change_theme) menu.add_cascade(label='\u89c6\u56fe', menu=View_menu) root[\"menu\"] = menu # \u521b\u5efa\u5feb\u6377\u83dc\u5355\u680f def create_shortcut(): shortcut = Frame(root, height=25, background='#FDF5E6') shortcut.pack(fill='x') for i, icon in enumerate(ICONS): tool_icon = PhotoImage(file='img/%s.gif' % (icon,)) tool_botton = Button(shortcut, image=tool_icon, command=shortcut_action(icon)) tool_botton.pack(side='left') icon_tmp.append(tool_icon) def shortcut_action(types, event=None): def tmp(): if (types == \"new_file\"): New_file() elif (types == \"open_file\"): Open_file() elif (types == \"save\"): Save_file() elif (types == \"undo\"): content.event_generate(\"<<Undo>>\") elif (types == \"redo\"): content.event_generate(\"<<Redo>>\") elif (types == \"cut\"): content.event_generate(\"<<Cut>>\") elif (types == \"copy\"): content.event_generate(\"<<Copy>>\") elif (types == \"paste\"): content.event_generate(\"<<Paste>>\") elif (types == \"find_text\"): find_text() if (types != \"copy\" and type != \"save\"): If_update() return tmp # \u521b\u5efa\u6587\u672c\u6846\u5904\u7684\u4e3b\u8981\u90e8\u4ef6 def create_body(): global content,line_bar # \u521b\u5efa\u884c\u53f7\u680f line_bar = Text(root, width=3, padx=3, takefocus=0, border=0, background='#DCDCDC', state='disabled') line_bar.pack(side='left', fill='y') # \u521b\u5efa\u8f93\u5165\u6846 content = Text(root, wrap='none', background='#FFFAFA', undo=True) content.pack(expand='yes', fill='both') content.bind('<Control-N>', New_file) content.bind('<Control-n>', New_file) content.bind('<Control-O>', Open_file) content.bind('<Control-o>', Open_file) content.bind('<Control-S>', Save_file) content.bind('<Control-s>', Save_file) content.bind('<Control-A>', All) content.bind('<Control-a>', All) content.bind('<Control-f>', find_text) content.bind('<Control-F>', find_text) content.bind('<Shift-Control-Z>',lambda x:Edit('\u6062\u590d')) content.tag_configure('active_line', background='#EEEEE0') # \u521b\u5efa\u6eda\u52a8\u6761 scroll_barr = Scrollbar(content, orient=VERTICAL) scroll_barr[\"command\"] = content.yview content[\"yscrollcommand\"] = scroll_barr.set scroll_barr.pack(side='right', fill='y') scroll_barb = Scrollbar(content, orient=HORIZONTAL) scroll_barb[\"command\"] = content.xview content[\"xscrollcommand\"] = scroll_barb.set scroll_barb.pack(side='bottom', fill='x') def If_update(): global Show_number if(Show_number.get()): Update_linenum1() content.bind(\"<Return>\", lambda x: Update_linenum1()) else: Update_linenum2() content.bind(\"<Return>\", lambda x: Update_linenum2()) def Update_linenum1(): global line_bar row, col = content.index(\"end\").split('.') line_num_content = \"\\n\".join([str(i) for i in range(1, int(row)+1)]) line_bar.config(state='normal') line_bar.delete('1.0', 'end') line_bar.insert('1.0', line_num_content) line_bar.config(state='disabled') def Update_linenum2(): global line_bar line_bar.config(state='normal') line_bar.delete('1.0', 'end') line_bar.config(state='disabled') def Highlight_line(): global Highlight if (Highlight.get()): content.tag_remove(\"active_line\", 1.0, \"end\") content.tag_add(\"active_line\", \"insert linestart\", \"insert lineend+1c\") content.after(200, Highlight_line) # \u4e0d\u77e5\u9053\u54ea\u91cc\u6709\u95ee\u9898,\u8bbe\u4e86after200\uff0c\u6709\u65f6\u8fd8\u4f1a\u62a5\u8d85\u51fa\u9012\u5f52\u4e0a\u9650\u7684\u9519 else: content.tag_remove(\"active_line\", 1.0, \"end\") def New_file(event=None): global content,file_name root.title(\"New\") content.delete(1.0, END) file_name = None def Open_file(event=None): global file_name input_file = filedialog.askopenfilename( filetypes=[(\"\u6240\u6709\u6587\u4ef6\", \"*.*\"), (\"\u6587\u672c\u6587\u6863\", \"*.txt\")]) if (input_file): root.title(\"%s\" % os.path.basename(input_file)) file_name = input_file content.delete(1.0, END) with open(input_file, 'r', encoding='gb18030', errors='ignore') as _file: content.insert(1.0, _file.read()) If_update() def Save_file(event=None): global file_name try: if not file_name: Save() else: Write_file(file_name) except: messagebox.showwarning('\u8b66\u544a','\u627e\u4e0d\u5230\u4fdd\u5b58\u7684\u6587\u4ef6') def Save(): global file_name input_file = filedialog.asksaveasfilename( filetypes=[(\"All Files\", \"*.*\"), (\"\u6587\u672c\u6587\u6863\", \"*.txt\")]) if input_file: file_name = input_file Write_file(file_name) def Write_file(file_name): try: Content = content.get(1.0, 'end') with open(file_name, 'w') as the_file: the_file.write(Content) root.title(\"%s - Editor\" % os.path.basename(file_name)) except IOError: messagebox.showwarning(\"\u4fdd\u5b58\", \"\u4fdd\u5b58\u5931\u8d25\uff01\") def All( event=None): content.tag_add('sel', '1.0', 'end') return \"break\" def change_theme(): global Theme_choice selected_theme = Theme_choice.get() bg12 = theme_color.get(selected_theme) bg1_color, bg2_color = bg12.split('.') content.config(bg=bg2_color) line_bar.config(bg=bg1_color) def Exit(): if messagebox.askokcancel(\"\u9000\u51fa?\", \" \u786e\u5b9a\u9000\u51fa?\"): root.destroy() def Edit(types, event=None): if (types == \"\u64a4\u9500\"): content.event_generate(\"<<Undo>>\") elif (types == \"\u6062\u590d\"): content.event_generate(\"<<Redo>>\") elif (types == \"\u526a\u5207\"): content.event_generate(\"<<Cut>>\") elif (types == \"\u590d\u5236\"): content.event_generate(\"<<Copy>>\") elif (types == \"\u7c98\u8d34\"): content.event_generate(\"<<Paste>>\") if (types != \"\u590d\u5236\"): If_update() return \"break\" def find_text(event=None): Search = Toplevel(root) Search.title('\u67e5\u627e\u6587\u672c') Search.transient(root) Search.resizable(False, False) Label(Search, text=\"\u67e5\u627e\u5168\u90e8:\").grid(row=0, column=0, sticky='e') Search_widget = Entry(Search, width=25) Search_widget.grid(row=0, column=1, padx=2, pady=2, sticky='we') Search_widget.focus_set() Ignore_value = IntVar() Checkbutton(Search, text='\u5ffd\u7565\u5927\u5c0f\u5199', variable=Ignore_value) \\ .grid(row=1, column=1, sticky='e', padx=2, pady=2) Button(Search, text=\"\u67e5\u627e\", command= lambda : search_result(Search_widget.get(), Ignore_value.get(), Search, Search_widget)) \\ .grid(row=0, column=2, sticky='e' + 'w', padx=2, pady=2) # \u5173\u95ed\u67e5\u627e\u7a97\u53e3\u65f6\u6d88\u9664\u67e5\u627e\u5b57\u7b26\u7684\u5370\u8bb0 def Search_result_gone(): content.tag_remove('match', '1.0', \"end\") Search.destroy() Search.protocol('WM_DELETE_WINDOW', Search_result_gone) return \"break\" def search_result(key, ignore_case, Search, search_widget): content.tag_remove('match', '1.0', \"end\") found = 0 if key: start_pos = '1.0' while True: # nocase\uff1a\u5ffd\u7565\u5927\u5c0f\u5199 start_pos = content.search(key, start_pos, nocase=ignore_case, stopindex=\"end\") if not start_pos: break end_pos = '{}+{}c'.format(start_pos, len(key)) content.tag_add('match', start_pos, end_pos) found += 1 start_pos = end_pos content.tag_config('match', foreground='red', background='yellow') search_widget.focus_set() Search.title('\u5171\u53d1\u73b0%d\u4e2a' % found) root.protocol('WM_DELETE_WINDOW', Exit) create_menu() create_shortcut() create_body() root = Tk(\"SimpleMDIExample\") root.title(\"\u591a\u6587\u6863\u6587\u672c\u7f16\u8f91\u5668\") root.geometry('650x450') Editor(root) root.mainloop()","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/","text":"python \u7b80\u5355\u8ba1\u7b97\u5668\u7684\u5b9e\u73b0 \u00b6 \u524d\u8a00\u5566 \u00b6 \u7528 python \u7684 tkinter \u5e93\u5efa\u7684\u4e00\u4e2a\u8ba1\u7b97\u5668\uff0c\u57fa\u672c\u529f\u80fd\u53c2\u7167\u5fae\u8f6f\u7684\uff0c\u518d\u52a0\u4e86\u4e00\u70b9\u4e2a\u4eba\u611f\u5174\u8da3\u7684\u6269\u5c55\u6a21\u5757... \u8bb2\u771f\u770b\u8d77\u6765\u8c8c\u4f3c\u6709\u70b9\u81c3\u80bf... \u7cfb\u7edf\u8bbe\u8ba1 \u00b6 \u4ee5\u4e0b\u5185\u5bb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7b80\u5355\u7684\u6d41\u7a0b\u800c\u5df2... \u9996\u5148\u8bbe\u8ba1\u7b80\u5355\u8ba1\u7b97\u5668\u7684\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u5165\u5404\u4e2a\u6269\u5c55\u3002\u7f16\u7a0b\u8bed\u8a00\u91c7\u7528 python \uff0c\u8c03\u7528 python \u7684\u56fe\u5f62\u5e93 tkinter \u8bbe\u8ba1\u56fe\u5f62\u754c\u9762\uff0c\u8c03\u7528 math \u5e93\u5b9e\u73b0\u5f00\u65b9\u3001\u4e09\u89d2\u3001\u5bf9\u6570\u8fd0\u7b97\u4ee5\u53ca e \u548c \u03c0 \u503c\u7684\u786e\u5b9a. \u8fd0\u7b97\u53ca\u8fde\u7eed\u8ba1\u7b97\u5b9e\u73b0\uff1a\u901a\u8fc7\u70b9\u51fb\u653e\u7f6e\u7684\u6309\u94ae\u5c06\u5bf9\u5e94\u7684\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u53f7\u52a0\u5165\u5230\u5b57\u7b26\u4e32\u5185\uff0c\u5e76\u5728\u6587\u672c\u6846\u663e\u793a\u3002\u5355\u51fb\u201c=\u201d\u8fdb\u884c\u8ba1\u7b97\uff0c\u5c06\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u5229\u7528\u6761\u4ef6\u5224\u65ad\u7684\u65b9\u5f0f\u5f97\u5230\u5bf9\u5e94\u7684\u8868\u8fbe\u5f62\u5f0f\uff0c\u8c03\u7528 eval()\u51fd\u6570\u76f4\u63a5\u6267\u884c\uff0c\u5e76\u5c06\u5176\u8ba1\u7b97\u7ed3\u679c\u91cd\u65b0\u8d4b\u7ed9\u8be5\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u4f7f\u8ba1\u7b97\u7ed3\u679c\u80fd\u591f\u53c2\u4e0e\u5230\u540e\u7eed\u8fd0\u7b97\uff0c\u82e5\u51fa\u73b0\u8ba1\u7b97\u8868\u8fbe\u683c\u5f0f\u7b49\u9519\u8bef\uff0c\u663e\u793a\u201cError\u201d\u62a5\u9519. \u6e05\u7a7a\u3001\u64a4\u9000\u529f\u80fd\u5b9e\u73b0\uff1a\u6e05\u7a7a\u5373\u6e05\u9664\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5e76\u663e\u793a\uff0c\u64a4\u9000\u5373\u5bf9\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u9009\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4ee5\u524d\u7684\u5185\u5bb9\u5e76\u663e\u793a. \u6269\u5c55\u6dfb\u52a0 \u00b6 \u8d37\u6b3e\u8ba1\u7b97\u5668\u5b9e\u73b0\uff1a\u901a\u8fc7\u5355\u51fb\u5bf9\u5e94\u6309\u94ae\u8fdb\u5165\u5bf9\u5e94\u7684\u7a0b\u5e8f\u6d41\u7a0b\u3002\u7528\u6587\u672c\u6846\u63a5\u6536\u8f93\u5165\u7684\u8d37\u6b3e\u5e74\u9650\u3001\u8d37\u6b3e\u91d1\u989d\u3001\u8d37\u6b3e\u5229\u7387\u7b49\u6570\u636e\uff0c\u8bfb\u53d6\u7b49\u989d\u672c\u606f\u3001\u7b49\u989d\u672c\u91d1\u7684\u5355\u9009\u6846\uff0c\u7528 flag \u53d8\u91cf\u8bb0\u5f55\u9009\u62e9\u7684\u9009\u9879\uff0c\u5355\u51fb\u8ba1\u7b97\u6309\u94ae\u8c03\u7528\u51fd\u6570\uff0c\u901a\u8fc7 flag \u53d8\u91cf\u5224\u65ad\u5e76\u8c03\u7528\u5bf9\u5e94\u7684\u8ba1\u7b97\u51fd\u6570\u3002\u5148\u540e\u8ba1\u7b97\u51fa\u6bcf\u6708\u8fd8\u6b3e\u3001\u603b\u8fd8\u6b3e\u91d1\u989d\u3001\u603b\u5229\u606f\uff0c\u7528\u6587\u672c\u6846\u63a5\u6536\u8ba1\u7b97\u503c\u5e76\u663e\u793a. Base64 \u52a0\u89e3\u5bc6\u5b9e\u73b0\uff1a\u5355\u51fb\u52a0\u5bc6\u6309\u94ae\u540e\uff0c\u7528 base64 \u5e93\u7684\u52a0\u5bc6\u51fd\u6570\u52a0\u5bc6\u5b57\u7b26\u4e32\u5185\u5bb9\u5e76\u5c06\u7ed3\u679c\u663e\u793a\uff0c\u5355\u51fb\u89e3\u5bc6\u6309\u94ae\u540e\uff0c\u7528 base64 \u5e93\u7684\u89e3\u5bc6\u51fd\u6570\u89e3\u5bc6\uff0c\u5e76\u5c06\u7ed3\u679c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u663e\u793a\uff0c\u4fdd\u8bc1\u89e3\u5bc6\u5185\u5bb9\u53ef\u4ee5\u53c2\u4e0e\u540e\u7eed\u8ba1\u7b97. RSA \u52a0\u89e3\u5bc6\u5b9e\u73b0\uff1a\u5355\u51fb RSA \u6309\u94ae\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u754c\u9762\u3002\u5355\u51fb\u201d\u751f\u6210\u516c\u94a5/\u79c1\u94a5\u201c\u6309\u94ae\u968f\u673a\u751f\u6210\u5bc6\u94a5\u5e76 base64 \u52a0\u5bc6\u540e\u663e\u793a\uff0c\u7528\u6587\u672c\u6846\u63a5\u6536\u52a0\u5bc6/\u89e3\u5bc6\u7684\u6587\u672c\uff0c\u5355\u51fb\u516c\u94a5\u3001\u79c1\u94a5\u52a0\u5bc6\u53ca\u79c1\u94a5\u89e3\u5bc6\u6309\u94ae\u5bf9\u6587\u672c\u8fdb\u884c\u5bf9\u5e94\u8fd0\u7b97\uff0c\u663e\u793a\u7ed3\u679c (\u5077\u61d2\u5566\uff0c\u76f4\u63a5\u8c03\u7528\u7684\u5e93). \u8fd0\u884c\u754c\u9762 \u00b6 \u4e00\u5171\u56db\u4e2a\u754c\u9762\uff1a 1.\u7b80\u5355\u8ba1\u7b97\u5668 2.\u6269\u5c55 3.\u8d37\u6b3e\u8ba1\u7b97\u5668 4.RSA \u52a0\u89e3\u5bc6 \u4ee3\u7801\u5b9e\u73b0 \u00b6 <pre class=\"wp-block-code\">``` # coding: utf-8 from tkinter import * from math import * import rsa import base64 class myMortgage: docstring for myMortgage def __init__(self): window = Tk() window.title(myMortgage) self.amountVar = StringVar() # \u8d37\u6b3e\u91d1\u989d self.rateVar = StringVar() # \u5e74\u5316\u5229\u7387 self.yearsVar = StringVar() # \u8d37\u6b3e\u5e74\u9650 self.total_Var = StringVar() # \u603b\u8fd8\u6b3e\u989d self.totalInterest_Var = StringVar() # \u603b\u5229\u606f self.monthRepayment_Var = StringVar() # \u7b2ci\u6708\u5e94\u8fd8 self.flag = IntVar() #\u5224\u65ad\u7b49\u989d\u672c\u606f\u672c\u91d1 self.flag=1 frame = Frame(window) frame.pack(padx=20, pady=20) iv_default = IntVar() Radiobutton(frame, width=6, text=\u7b49\u989d\u672c\u606f,value=1, variable=iv_default, command=self.judge_1).grid(row=1, column=2, sticky=W) Radiobutton(frame, width=6, text=\u7b49\u989d\u672c\u91d1,value=2, variable=iv_default, command=self.judge_2).grid(row=1, column=3, sticky=W) iv_default.set(1) Label(frame,text=\u8fd8\u6b3e\u65b9\u5f0f:).grid(row=1,column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u5e74\u9650(\u5e74):).grid(row=2, column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u91d1\u989d(\u4e07\u5143):).grid(row=3, column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u5229\u7387(%):).grid(row=4, column=1,sticky='w') Label(frame, text=\u6708\u5747\u8fd8\u6b3e(\u5143):).grid(row=6, column=1,sticky='w') Label(frame, text=\u5229\u606f\u603b\u989d(\u5143):).grid(row=7, column=1,sticky='w') Label(frame, text=\u8fd8\u6b3e\u603b\u989d(\u5143):).grid(row=8, column=1,sticky='w') Entry(frame, textvariable=self.amountVar).grid(row=3, column=2) Entry(frame, textvariable=self.rateVar).grid(row=4, column=2) Entry(frame, textvariable=self.yearsVar).grid(row=2, column=2) Entry(frame, textvariable=self.total_Var).grid(row=8, column=2, sticky=E) Entry(frame, textvariable=self.totalInterest_Var).grid(row=7, column=2, sticky=E) Entry(frame, textvariable=self.monthRepayment_Var).grid(row=6, column=2, sticky=E) Button(frame, width=10, text=\u8ba1\u7b97, command=self.calculate).grid(row=5, column=1, pady=0) Button(frame, width=10, text=\u91cd\u65b0\u8ba1\u7b97, command=self.recalculate).grid(row=5, column=2, pady=0) window.mainloop() def judge_1(self): self.flag=1 def judge_2(self): self.flag=2 def calculate(self): if(self.flag==1): self.calculate_1() if(self.flag==2): self.calculate_2() def recalculate(self): if(self.flag==1): self.calculate_1() if(self.flag==2): self.calculate_2() def calculate_1(self): amount = eval(self.amountVar.get()) * 10000 rate = eval(self.rateVar.get()) / 100 / 12 # \u5c06\u5e74\u5316\u5229\u7387\u8f6c\u4e3a\u6708\u5229\u7387\uff0c\u5355\u4f4d\u4e3a1 years = eval(self.yearsVar.get()) # \u8ba1\u7b97\u6bcf\u6708\u8fd8\u6b3e monthRepayment = amount * rate * ((1 + rate ) ** (years * 12)) / ((1 + rate ) ** (years * 12) - 1) # \u5c06\u8ba1\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7ed9\u63a7\u4ef6 total = monthRepayment * 12 * years # \u603b\u8fd8\u6b3e\u91d1\u989d self.total_Var.set(format(total, .3f)) totalInterest = total - amount # \u603b\u5229\u606f self.totalInterest_Var.set(format(totalInterest, '.3f')) self.monthRepayment_Var.set(format(monthRepayment, '.3f')) def calculate_2(self): amount = eval(self.amountVar.get()) * 10000 rate = eval(self.rateVar.get()) / 100 / 12 # \u5c06\u5e74\u5316\u5229\u7387\u8f6c\u4e3a\u6708\u5229\u7387\uff0c\u5355\u4f4d\u4e3a1 years = eval(self.yearsVar.get()) month_amount = amount / (years * 12) # \u5b58\u50a8\u6bcf\u6708\u8fd8\u6b3e monthRepayment = [] for i in range(1, (years * 12) + 1): monthpayment = month_amount + (amount - (i - 1) * month_amount) * rate monthRepayment.append(monthpayment) # \u5c06\u8ba1\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7ed9\u63a7\u4ef6 total = sum(monthRepayment) self.total_Var.set(format(total, .3f)) totalInterest = total - amount self.totalInterest_Var.set(format(totalInterest, '.3f')) self.monthRepayment_Var.set(format(total/12, '.3f')) def RSA(): def GenerateKey(): (public_key, private_key) = rsa.newkeys(1024) #print(\\n\u751f\u6210\u516c\u94a5\uff1a+public_key.save_pkcs1().decode('utf8')) #print(\\n\u751f\u6210\u79c1\u94a5\uff1a+private_key.save_pkcs1().decode('utf8')) publicKeyText.delete(0.0, END) publicKeyText.insert(END, public_key.save_pkcs1().decode('utf8')) privateKeyText.delete(0.0, END) privateKeyText.insert(END, private_key.save_pkcs1().decode('utf8')) def EncryptionByPublickey(): #\u7528\u516c\u94a5\u52a0\u5bc6 public_key_str = publicKeyText.get(0.0, end).encode(encoding=utf-8) public_key = rsa.PublicKey.load_pkcs1(public_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = rsa.encrypt(entry_str, public_key) #print(\u516c\u94a5\u52a0\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+base64.encodebytes(encrypt_msg).decode('utf8')) outputText.delete(0.0, END) outputText.insert(END, base64.encodebytes(encrypt_msg).decode('utf8')) def EncryptionByPrivatekey(): private_key_str = privateKeyText.get(0.0, end).encode(encoding=utf-8) private_key = rsa.PrivateKey.load_pkcs1(private_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = rsa.encrypt(entry_str, private_key) #print(\u79c1\u94a5\u52a0\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+base64.encodebytes(encrypt_msg).decode('utf8')) outputText.delete(0.0, END) outputText.insert(END, base64.encodebytes(encrypt_msg).decode('utf8')) def DecryptionByPrivatekey(): private_key_str = privateKeyText.get(0.0, end).encode(encoding=utf-8) private_key = rsa.PrivateKey.load_pkcs1(private_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = base64.decodebytes( entry_str) outputText.delete(0.0, END) try: decrypt_msg = rsa.decrypt(encrypt_msg, private_key) #print(\u79c1\u94a5\u89e3\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+decrypt_msg.decode('utf8')) outputText.insert(END,decrypt_msg.decode('utf8')) except: decrypt_msg = \u79c1\u94a5\u89e3\u5bc6\u5931\u8d25 #print(decrypt_msg) outputText.insert(END,decrypt_msg) window = Tk() window.title(RSA\u52a0\u89e3\u5bc6\u8ba1\u7b97\u5668) frame = Frame(window) frame.pack() label = Label(frame, text = \u516c\u94a5(\u5df2base64)\uff1a) label.grid(row = 1, column = 1,columnspan= 4) publicKeyText = Text(frame,width=50,height=8) publicKeyText.grid(row = 2, column = 1,columnspan = 4) label = Label(frame, text = \u79c1\u94a5(\u5df2base64)\uff1a) label.grid(row = 3, column = 1,columnspan= 4) privateKeyText = Text(frame,width=50,height=12) privateKeyText.grid(row = 4, column = 1,columnspan = 4) btGenerateKey = Button(frame, text = \u751f\u6210\u516c\u94a5/\u79c1\u94a5,command=GenerateKey) btGenerateKey.grid(row = 5, column = 1,columnspan = 4) label = Label(frame, text = \u8bf7\u8f93\u5165\u52a0\u5bc6/\u89e3\u5bc6\u7684\u6587\u672c:) label.grid(row = 6, column = 1,columnspan = 4) entryText = Text(frame,width=50,height=5) entryText.grid(row = 7, column = 1,columnspan = 4) btEncryptionByPublickey = Button(frame, text = \u516c\u94a5\u52a0\u5bc6,command=EncryptionByPublickey) btEncryptionByPublickey.grid(row = 8, column = 1,columnspan=2,pady = 10) btEncryptionByPrivatekey = Button(frame, text = \u79c1\u94a5\u52a0\u5bc6,command=EncryptionByPrivatekey) btEncryptionByPrivatekey.grid(row = 8, column = 3) btDecryptionByPrivatekey = Button(frame, text = \u79c1\u94a5\u89e3\u5bc6,command=DecryptionByPrivatekey) btDecryptionByPrivatekey.grid(row = 8, column = 4) outputText = Text(frame,width=50,height=5) outputText.grid(row = 9, column = 1,columnspan = 4) GenerateKey(); mainloop() class myCalculator: docstring for myCalculator def __init__(self, master): self.master = master self.initWidgets() self.hi = None def initWidgets(self): self.show = Label(relief=SUNKEN, font=('Courier New', 24),width=23, bg='white', anchor=W) self.show.pack(side=TOP, pady=10) self.p = Frame(self.master) self.p.pack(side=TOP) names = ( \u6e05\u7a7a , <- , ** , sqrt , 1 , 2 , 3 , + , // , 4 , 5 , 6 , - , % , 7 , 8 , 9 , * , = , 0 , . , / , myMortgage <-,->export,(,)) for i in range(4): if(i == 0): b = Button(self.p, text=names[i], font=('Verdana', 20), width=9,bg='orange') b.grid(row=0,column=0,columnspan=2) b.bind('<Button-1>', self.clean) if(i == 1): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row=0,column=2) b.bind('<Button-1>', self.delete) if(i == 2): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 0 , column = 3) b.bind('<Button-1>', self.click) if(i == 3): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 0 , column = 4,) b.bind('<Button-1>', self.Sqrt) for i in range(4,9): if(i == 7 or i == 8): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row = 1 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) for i in range(9,14): if(i == 12 or i == 13): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row = 2 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) for i in range(14,19): if(i == 17 or i == 18): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') if(i == 18):break b.grid(row = 3 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) if(i == 18): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4, height=3,bg='light green') b.grid(row=3,column=4,rowspan=2) b.bind('<Button-1>', self.click) i+=1 if(i == 19): b = Button(self.p, text=names[i], font=('Verdana', 20), width=9,bg='orange') b.grid(row=4,column=0,columnspan=2) b.bind('<Button-1>', self.click) for i in range(20,23): if(i == 22):break if(i == 20):b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') if(i == 21):b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 4 , column = (i-3) % 5,) b.bind('<Button-1>', self.click) if(i == 22): b = Button(self.p, text=names[i], font=('Verdana', 20), width=14,bg='LemonChiffon') b.grid(row = 5 , column = 0 , columnspan=3 , sticky = e) b.bind('<Button-1>', self.Mortgage) i +=1 if (i == 23): b = Button(self.p, text=names[i], font=('Verdana', 20), width=10,bg='Thistle') b.grid(row = 6 , column = 2 , columnspan=3 , sticky = e) b.bind('<Button-1>',self.extra_func) i +=1 if(i == 24): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 5 , column = 3 , columnspan=1 , sticky = e) b.bind('<Button-1>', self.click) i +=1 if(i == 25): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 5 , column = 4 , columnspan=1 , sticky = e) b.bind('<Button-1>', self.click) self.i = 0 def click(self, event): try: if(event.widget['text'] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.')): self.show['text'] = self.show['text'] + event.widget['text'] self.i = self.i + 1 elif(event.widget['text'] in ('+', '-', '*', '/', '%', '**', '//', '(', ')')): self.show['text'] = self.show['text'] + event.widget['text'] elif(event.widget['text'] == '=' and self.show['text'] is not None): if(self.show['text'] != ''): self.hi = self.show['text'] if('base' in self.hi): num=self.hi.find(')') base=self.hi.find('=') self.show['text'] = str(eval(self.hi[:num] + , + self.hi[base+1:] + ))) else: self.show['text'] = str(eval(self.hi)) self.hi = None self.i = 0 except: self.show['text'] = Error def Sqrt(self,event): self.show['text'] = 'sqrt(' + self.show['text'] + ')' def Ln(self,event): self.show['text'] = 'log(' + self.show['text'] + ',e)' def Log(self,event): self.show['text'] = 'log(' + self.show['text'] + '),base=' def num_e(self,event): self.show['text'] = self.show['text'] + e def num_pi(self,event): self.show['text'] = self.show['text'] + pi def Sin(self,event): self.show['text'] = sin( + self.show['text'] + ) def Cos(self,event): self.show['text'] = cos( + self.show['text'] + ) def Tan(self,event): self.show['text'] = tan( + self.show['text'] + ) def Asin(self,event): self.show['text'] = asin( + self.show['text'] + ) def Acos(self,event): self.show['text'] = acos( + self.show['text'] + ) def Atan(self,event): self.show['text'] = atan( + self.show['text'] + ) def clean(self, event): self.hi = None self.show['text'] = '' def delete(self,event): self.show['text'] = self.show['text'][:-1] def base64_en(self,event): try: self.show['text'] = base64.b64encode(bytes(self.show['text'].encode())) except: self.show['text'] = base64.b64encode(self.show['text']) def base64_de(self,event): try: self.show['text'] = base64.b64decode(self.show['text']).decode() except: self.show['text'] = base64 decode failed def Mortgage(self,event): self.master.destroy() myMortgage() def Rsa(self,event): #self.master.destroy() RSA() def extra_func(self,event): b = Button(self.p, text=ln, font=('Verdana', 20), width=6,bg='light blue') b.grid(row = 0 , column =5) b.bind('<Button-1>',self.Ln) b = Button(self.p, text=log, font=('Verdana', 20), width=6,bg='light blue') b.grid(row = 0 , column =6) b.bind('<Button-1>',self.Log) b = Button(self.p, text=e, font=('Verdana', 20), width=6,bg='orange') b.grid(row = 1 , column =5) b.bind('<Button-1>',self.num_e) b = Button(self.p, text=\u03c0, font=('Verdana', 20), width=6,bg='orange') b.grid(row = 1 , column =6) b.bind('<Button-1>',self.num_pi) b = Button(self.p, text=sin, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3,sticky=W) b.bind('<Button-1>',self.Sin) b = Button(self.p, text=cos, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3) b.bind('<Button-1>',self.Cos) b = Button(self.p, text=tan, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3,sticky=E) b.bind('<Button-1>',self.Tan) b = Button(self.p, text=asin, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3,sticky=W) b.bind('<Button-1>',self.Asin) b = Button(self.p, text=acos, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3) b.bind('<Button-1>',self.Acos) b = Button(self.p, text=atan, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3,sticky=E) b.bind('<Button-1>',self.Atan) b = Button(self.p, text=b64\u52a0, font=('Verdana', 20), width=6,bg='Silver') b.grid(row = 4 , column = 5 , sticky = w) b.bind('<Button-1>', self.base64_en) b = Button(self.p, text=b64\u89e3, font=('Verdana', 20), width=6,bg='Silver') b.grid(row = 4 , column = 6 , sticky = e) b.bind('<Button-1>', self.base64_de) b = Button(self.p, text=-> RSA, font=('Verdana', 20), width=12,bg='Silver',command=RSA) b.grid(row = 5 , column = 5, columnspan=3) root = Tk() myCalculator(root) root.title(myCalculator) root.mainloop()","title":"Python"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#python","text":"","title":"python \u7b80\u5355\u8ba1\u7b97\u5668\u7684\u5b9e\u73b0"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_1","text":"\u7528 python \u7684 tkinter \u5e93\u5efa\u7684\u4e00\u4e2a\u8ba1\u7b97\u5668\uff0c\u57fa\u672c\u529f\u80fd\u53c2\u7167\u5fae\u8f6f\u7684\uff0c\u518d\u52a0\u4e86\u4e00\u70b9\u4e2a\u4eba\u611f\u5174\u8da3\u7684\u6269\u5c55\u6a21\u5757... \u8bb2\u771f\u770b\u8d77\u6765\u8c8c\u4f3c\u6709\u70b9\u81c3\u80bf...","title":"\u524d\u8a00\u5566"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_2","text":"\u4ee5\u4e0b\u5185\u5bb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u7b80\u5355\u7684\u6d41\u7a0b\u800c\u5df2... \u9996\u5148\u8bbe\u8ba1\u7b80\u5355\u8ba1\u7b97\u5668\u7684\u529f\u80fd\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u52a0\u5165\u5404\u4e2a\u6269\u5c55\u3002\u7f16\u7a0b\u8bed\u8a00\u91c7\u7528 python \uff0c\u8c03\u7528 python \u7684\u56fe\u5f62\u5e93 tkinter \u8bbe\u8ba1\u56fe\u5f62\u754c\u9762\uff0c\u8c03\u7528 math \u5e93\u5b9e\u73b0\u5f00\u65b9\u3001\u4e09\u89d2\u3001\u5bf9\u6570\u8fd0\u7b97\u4ee5\u53ca e \u548c \u03c0 \u503c\u7684\u786e\u5b9a. \u8fd0\u7b97\u53ca\u8fde\u7eed\u8ba1\u7b97\u5b9e\u73b0\uff1a\u901a\u8fc7\u70b9\u51fb\u653e\u7f6e\u7684\u6309\u94ae\u5c06\u5bf9\u5e94\u7684\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u53f7\u52a0\u5165\u5230\u5b57\u7b26\u4e32\u5185\uff0c\u5e76\u5728\u6587\u672c\u6846\u663e\u793a\u3002\u5355\u51fb\u201c=\u201d\u8fdb\u884c\u8ba1\u7b97\uff0c\u5c06\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u5229\u7528\u6761\u4ef6\u5224\u65ad\u7684\u65b9\u5f0f\u5f97\u5230\u5bf9\u5e94\u7684\u8868\u8fbe\u5f62\u5f0f\uff0c\u8c03\u7528 eval()\u51fd\u6570\u76f4\u63a5\u6267\u884c\uff0c\u5e76\u5c06\u5176\u8ba1\u7b97\u7ed3\u679c\u91cd\u65b0\u8d4b\u7ed9\u8be5\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u4f7f\u8ba1\u7b97\u7ed3\u679c\u80fd\u591f\u53c2\u4e0e\u5230\u540e\u7eed\u8fd0\u7b97\uff0c\u82e5\u51fa\u73b0\u8ba1\u7b97\u8868\u8fbe\u683c\u5f0f\u7b49\u9519\u8bef\uff0c\u663e\u793a\u201cError\u201d\u62a5\u9519. \u6e05\u7a7a\u3001\u64a4\u9000\u529f\u80fd\u5b9e\u73b0\uff1a\u6e05\u7a7a\u5373\u6e05\u9664\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5e76\u663e\u793a\uff0c\u64a4\u9000\u5373\u5bf9\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u9009\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4ee5\u524d\u7684\u5185\u5bb9\u5e76\u663e\u793a.","title":"\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_3","text":"\u8d37\u6b3e\u8ba1\u7b97\u5668\u5b9e\u73b0\uff1a\u901a\u8fc7\u5355\u51fb\u5bf9\u5e94\u6309\u94ae\u8fdb\u5165\u5bf9\u5e94\u7684\u7a0b\u5e8f\u6d41\u7a0b\u3002\u7528\u6587\u672c\u6846\u63a5\u6536\u8f93\u5165\u7684\u8d37\u6b3e\u5e74\u9650\u3001\u8d37\u6b3e\u91d1\u989d\u3001\u8d37\u6b3e\u5229\u7387\u7b49\u6570\u636e\uff0c\u8bfb\u53d6\u7b49\u989d\u672c\u606f\u3001\u7b49\u989d\u672c\u91d1\u7684\u5355\u9009\u6846\uff0c\u7528 flag \u53d8\u91cf\u8bb0\u5f55\u9009\u62e9\u7684\u9009\u9879\uff0c\u5355\u51fb\u8ba1\u7b97\u6309\u94ae\u8c03\u7528\u51fd\u6570\uff0c\u901a\u8fc7 flag \u53d8\u91cf\u5224\u65ad\u5e76\u8c03\u7528\u5bf9\u5e94\u7684\u8ba1\u7b97\u51fd\u6570\u3002\u5148\u540e\u8ba1\u7b97\u51fa\u6bcf\u6708\u8fd8\u6b3e\u3001\u603b\u8fd8\u6b3e\u91d1\u989d\u3001\u603b\u5229\u606f\uff0c\u7528\u6587\u672c\u6846\u63a5\u6536\u8ba1\u7b97\u503c\u5e76\u663e\u793a. Base64 \u52a0\u89e3\u5bc6\u5b9e\u73b0\uff1a\u5355\u51fb\u52a0\u5bc6\u6309\u94ae\u540e\uff0c\u7528 base64 \u5e93\u7684\u52a0\u5bc6\u51fd\u6570\u52a0\u5bc6\u5b57\u7b26\u4e32\u5185\u5bb9\u5e76\u5c06\u7ed3\u679c\u663e\u793a\uff0c\u5355\u51fb\u89e3\u5bc6\u6309\u94ae\u540e\uff0c\u7528 base64 \u5e93\u7684\u89e3\u5bc6\u51fd\u6570\u89e3\u5bc6\uff0c\u5e76\u5c06\u7ed3\u679c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u663e\u793a\uff0c\u4fdd\u8bc1\u89e3\u5bc6\u5185\u5bb9\u53ef\u4ee5\u53c2\u4e0e\u540e\u7eed\u8ba1\u7b97. RSA \u52a0\u89e3\u5bc6\u5b9e\u73b0\uff1a\u5355\u51fb RSA \u6309\u94ae\uff0c\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u754c\u9762\u3002\u5355\u51fb\u201d\u751f\u6210\u516c\u94a5/\u79c1\u94a5\u201c\u6309\u94ae\u968f\u673a\u751f\u6210\u5bc6\u94a5\u5e76 base64 \u52a0\u5bc6\u540e\u663e\u793a\uff0c\u7528\u6587\u672c\u6846\u63a5\u6536\u52a0\u5bc6/\u89e3\u5bc6\u7684\u6587\u672c\uff0c\u5355\u51fb\u516c\u94a5\u3001\u79c1\u94a5\u52a0\u5bc6\u53ca\u79c1\u94a5\u89e3\u5bc6\u6309\u94ae\u5bf9\u6587\u672c\u8fdb\u884c\u5bf9\u5e94\u8fd0\u7b97\uff0c\u663e\u793a\u7ed3\u679c (\u5077\u61d2\u5566\uff0c\u76f4\u63a5\u8c03\u7528\u7684\u5e93).","title":"\u6269\u5c55\u6dfb\u52a0"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_4","text":"\u4e00\u5171\u56db\u4e2a\u754c\u9762\uff1a 1.\u7b80\u5355\u8ba1\u7b97\u5668 2.\u6269\u5c55 3.\u8d37\u6b3e\u8ba1\u7b97\u5668 4.RSA \u52a0\u89e3\u5bc6","title":"\u8fd0\u884c\u754c\u9762"},{"location":"Python/%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/#_5","text":"<pre class=\"wp-block-code\">``` # coding: utf-8 from tkinter import * from math import * import rsa import base64 class myMortgage: docstring for myMortgage def __init__(self): window = Tk() window.title(myMortgage) self.amountVar = StringVar() # \u8d37\u6b3e\u91d1\u989d self.rateVar = StringVar() # \u5e74\u5316\u5229\u7387 self.yearsVar = StringVar() # \u8d37\u6b3e\u5e74\u9650 self.total_Var = StringVar() # \u603b\u8fd8\u6b3e\u989d self.totalInterest_Var = StringVar() # \u603b\u5229\u606f self.monthRepayment_Var = StringVar() # \u7b2ci\u6708\u5e94\u8fd8 self.flag = IntVar() #\u5224\u65ad\u7b49\u989d\u672c\u606f\u672c\u91d1 self.flag=1 frame = Frame(window) frame.pack(padx=20, pady=20) iv_default = IntVar() Radiobutton(frame, width=6, text=\u7b49\u989d\u672c\u606f,value=1, variable=iv_default, command=self.judge_1).grid(row=1, column=2, sticky=W) Radiobutton(frame, width=6, text=\u7b49\u989d\u672c\u91d1,value=2, variable=iv_default, command=self.judge_2).grid(row=1, column=3, sticky=W) iv_default.set(1) Label(frame,text=\u8fd8\u6b3e\u65b9\u5f0f:).grid(row=1,column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u5e74\u9650(\u5e74):).grid(row=2, column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u91d1\u989d(\u4e07\u5143):).grid(row=3, column=1,sticky='w') Label(frame, text=\u8d37\u6b3e\u5229\u7387(%):).grid(row=4, column=1,sticky='w') Label(frame, text=\u6708\u5747\u8fd8\u6b3e(\u5143):).grid(row=6, column=1,sticky='w') Label(frame, text=\u5229\u606f\u603b\u989d(\u5143):).grid(row=7, column=1,sticky='w') Label(frame, text=\u8fd8\u6b3e\u603b\u989d(\u5143):).grid(row=8, column=1,sticky='w') Entry(frame, textvariable=self.amountVar).grid(row=3, column=2) Entry(frame, textvariable=self.rateVar).grid(row=4, column=2) Entry(frame, textvariable=self.yearsVar).grid(row=2, column=2) Entry(frame, textvariable=self.total_Var).grid(row=8, column=2, sticky=E) Entry(frame, textvariable=self.totalInterest_Var).grid(row=7, column=2, sticky=E) Entry(frame, textvariable=self.monthRepayment_Var).grid(row=6, column=2, sticky=E) Button(frame, width=10, text=\u8ba1\u7b97, command=self.calculate).grid(row=5, column=1, pady=0) Button(frame, width=10, text=\u91cd\u65b0\u8ba1\u7b97, command=self.recalculate).grid(row=5, column=2, pady=0) window.mainloop() def judge_1(self): self.flag=1 def judge_2(self): self.flag=2 def calculate(self): if(self.flag==1): self.calculate_1() if(self.flag==2): self.calculate_2() def recalculate(self): if(self.flag==1): self.calculate_1() if(self.flag==2): self.calculate_2() def calculate_1(self): amount = eval(self.amountVar.get()) * 10000 rate = eval(self.rateVar.get()) / 100 / 12 # \u5c06\u5e74\u5316\u5229\u7387\u8f6c\u4e3a\u6708\u5229\u7387\uff0c\u5355\u4f4d\u4e3a1 years = eval(self.yearsVar.get()) # \u8ba1\u7b97\u6bcf\u6708\u8fd8\u6b3e monthRepayment = amount * rate * ((1 + rate ) ** (years * 12)) / ((1 + rate ) ** (years * 12) - 1) # \u5c06\u8ba1\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7ed9\u63a7\u4ef6 total = monthRepayment * 12 * years # \u603b\u8fd8\u6b3e\u91d1\u989d self.total_Var.set(format(total, .3f)) totalInterest = total - amount # \u603b\u5229\u606f self.totalInterest_Var.set(format(totalInterest, '.3f')) self.monthRepayment_Var.set(format(monthRepayment, '.3f')) def calculate_2(self): amount = eval(self.amountVar.get()) * 10000 rate = eval(self.rateVar.get()) / 100 / 12 # \u5c06\u5e74\u5316\u5229\u7387\u8f6c\u4e3a\u6708\u5229\u7387\uff0c\u5355\u4f4d\u4e3a1 years = eval(self.yearsVar.get()) month_amount = amount / (years * 12) # \u5b58\u50a8\u6bcf\u6708\u8fd8\u6b3e monthRepayment = [] for i in range(1, (years * 12) + 1): monthpayment = month_amount + (amount - (i - 1) * month_amount) * rate monthRepayment.append(monthpayment) # \u5c06\u8ba1\u7b97\u7ed3\u679c\u8bbe\u7f6e\u7ed9\u63a7\u4ef6 total = sum(monthRepayment) self.total_Var.set(format(total, .3f)) totalInterest = total - amount self.totalInterest_Var.set(format(totalInterest, '.3f')) self.monthRepayment_Var.set(format(total/12, '.3f')) def RSA(): def GenerateKey(): (public_key, private_key) = rsa.newkeys(1024) #print(\\n\u751f\u6210\u516c\u94a5\uff1a+public_key.save_pkcs1().decode('utf8')) #print(\\n\u751f\u6210\u79c1\u94a5\uff1a+private_key.save_pkcs1().decode('utf8')) publicKeyText.delete(0.0, END) publicKeyText.insert(END, public_key.save_pkcs1().decode('utf8')) privateKeyText.delete(0.0, END) privateKeyText.insert(END, private_key.save_pkcs1().decode('utf8')) def EncryptionByPublickey(): #\u7528\u516c\u94a5\u52a0\u5bc6 public_key_str = publicKeyText.get(0.0, end).encode(encoding=utf-8) public_key = rsa.PublicKey.load_pkcs1(public_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = rsa.encrypt(entry_str, public_key) #print(\u516c\u94a5\u52a0\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+base64.encodebytes(encrypt_msg).decode('utf8')) outputText.delete(0.0, END) outputText.insert(END, base64.encodebytes(encrypt_msg).decode('utf8')) def EncryptionByPrivatekey(): private_key_str = privateKeyText.get(0.0, end).encode(encoding=utf-8) private_key = rsa.PrivateKey.load_pkcs1(private_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = rsa.encrypt(entry_str, private_key) #print(\u79c1\u94a5\u52a0\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+base64.encodebytes(encrypt_msg).decode('utf8')) outputText.delete(0.0, END) outputText.insert(END, base64.encodebytes(encrypt_msg).decode('utf8')) def DecryptionByPrivatekey(): private_key_str = privateKeyText.get(0.0, end).encode(encoding=utf-8) private_key = rsa.PrivateKey.load_pkcs1(private_key_str) entry_str = entryText.get(0.0, end).encode(encoding=utf-8) encrypt_msg = base64.decodebytes( entry_str) outputText.delete(0.0, END) try: decrypt_msg = rsa.decrypt(encrypt_msg, private_key) #print(\u79c1\u94a5\u89e3\u5bc6\u540e\u7684\u6587\u672c\u4e3a\uff1a\\n+decrypt_msg.decode('utf8')) outputText.insert(END,decrypt_msg.decode('utf8')) except: decrypt_msg = \u79c1\u94a5\u89e3\u5bc6\u5931\u8d25 #print(decrypt_msg) outputText.insert(END,decrypt_msg) window = Tk() window.title(RSA\u52a0\u89e3\u5bc6\u8ba1\u7b97\u5668) frame = Frame(window) frame.pack() label = Label(frame, text = \u516c\u94a5(\u5df2base64)\uff1a) label.grid(row = 1, column = 1,columnspan= 4) publicKeyText = Text(frame,width=50,height=8) publicKeyText.grid(row = 2, column = 1,columnspan = 4) label = Label(frame, text = \u79c1\u94a5(\u5df2base64)\uff1a) label.grid(row = 3, column = 1,columnspan= 4) privateKeyText = Text(frame,width=50,height=12) privateKeyText.grid(row = 4, column = 1,columnspan = 4) btGenerateKey = Button(frame, text = \u751f\u6210\u516c\u94a5/\u79c1\u94a5,command=GenerateKey) btGenerateKey.grid(row = 5, column = 1,columnspan = 4) label = Label(frame, text = \u8bf7\u8f93\u5165\u52a0\u5bc6/\u89e3\u5bc6\u7684\u6587\u672c:) label.grid(row = 6, column = 1,columnspan = 4) entryText = Text(frame,width=50,height=5) entryText.grid(row = 7, column = 1,columnspan = 4) btEncryptionByPublickey = Button(frame, text = \u516c\u94a5\u52a0\u5bc6,command=EncryptionByPublickey) btEncryptionByPublickey.grid(row = 8, column = 1,columnspan=2,pady = 10) btEncryptionByPrivatekey = Button(frame, text = \u79c1\u94a5\u52a0\u5bc6,command=EncryptionByPrivatekey) btEncryptionByPrivatekey.grid(row = 8, column = 3) btDecryptionByPrivatekey = Button(frame, text = \u79c1\u94a5\u89e3\u5bc6,command=DecryptionByPrivatekey) btDecryptionByPrivatekey.grid(row = 8, column = 4) outputText = Text(frame,width=50,height=5) outputText.grid(row = 9, column = 1,columnspan = 4) GenerateKey(); mainloop() class myCalculator: docstring for myCalculator def __init__(self, master): self.master = master self.initWidgets() self.hi = None def initWidgets(self): self.show = Label(relief=SUNKEN, font=('Courier New', 24),width=23, bg='white', anchor=W) self.show.pack(side=TOP, pady=10) self.p = Frame(self.master) self.p.pack(side=TOP) names = ( \u6e05\u7a7a , <- , ** , sqrt , 1 , 2 , 3 , + , // , 4 , 5 , 6 , - , % , 7 , 8 , 9 , * , = , 0 , . , / , myMortgage <-,->export,(,)) for i in range(4): if(i == 0): b = Button(self.p, text=names[i], font=('Verdana', 20), width=9,bg='orange') b.grid(row=0,column=0,columnspan=2) b.bind('<Button-1>', self.clean) if(i == 1): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row=0,column=2) b.bind('<Button-1>', self.delete) if(i == 2): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 0 , column = 3) b.bind('<Button-1>', self.click) if(i == 3): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 0 , column = 4,) b.bind('<Button-1>', self.Sqrt) for i in range(4,9): if(i == 7 or i == 8): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row = 1 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) for i in range(9,14): if(i == 12 or i == 13): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') b.grid(row = 2 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) for i in range(14,19): if(i == 17 or i == 18): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') else: b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') if(i == 18):break b.grid(row = 3 , column = (i-4) % 5,) b.bind('<Button-1>', self.click) if(i == 18): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4, height=3,bg='light green') b.grid(row=3,column=4,rowspan=2) b.bind('<Button-1>', self.click) i+=1 if(i == 19): b = Button(self.p, text=names[i], font=('Verdana', 20), width=9,bg='orange') b.grid(row=4,column=0,columnspan=2) b.bind('<Button-1>', self.click) for i in range(20,23): if(i == 22):break if(i == 20):b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='orange') if(i == 21):b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 4 , column = (i-3) % 5,) b.bind('<Button-1>', self.click) if(i == 22): b = Button(self.p, text=names[i], font=('Verdana', 20), width=14,bg='LemonChiffon') b.grid(row = 5 , column = 0 , columnspan=3 , sticky = e) b.bind('<Button-1>', self.Mortgage) i +=1 if (i == 23): b = Button(self.p, text=names[i], font=('Verdana', 20), width=10,bg='Thistle') b.grid(row = 6 , column = 2 , columnspan=3 , sticky = e) b.bind('<Button-1>',self.extra_func) i +=1 if(i == 24): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 5 , column = 3 , columnspan=1 , sticky = e) b.bind('<Button-1>', self.click) i +=1 if(i == 25): b = Button(self.p, text=names[i], font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 5 , column = 4 , columnspan=1 , sticky = e) b.bind('<Button-1>', self.click) self.i = 0 def click(self, event): try: if(event.widget['text'] in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.')): self.show['text'] = self.show['text'] + event.widget['text'] self.i = self.i + 1 elif(event.widget['text'] in ('+', '-', '*', '/', '%', '**', '//', '(', ')')): self.show['text'] = self.show['text'] + event.widget['text'] elif(event.widget['text'] == '=' and self.show['text'] is not None): if(self.show['text'] != ''): self.hi = self.show['text'] if('base' in self.hi): num=self.hi.find(')') base=self.hi.find('=') self.show['text'] = str(eval(self.hi[:num] + , + self.hi[base+1:] + ))) else: self.show['text'] = str(eval(self.hi)) self.hi = None self.i = 0 except: self.show['text'] = Error def Sqrt(self,event): self.show['text'] = 'sqrt(' + self.show['text'] + ')' def Ln(self,event): self.show['text'] = 'log(' + self.show['text'] + ',e)' def Log(self,event): self.show['text'] = 'log(' + self.show['text'] + '),base=' def num_e(self,event): self.show['text'] = self.show['text'] + e def num_pi(self,event): self.show['text'] = self.show['text'] + pi def Sin(self,event): self.show['text'] = sin( + self.show['text'] + ) def Cos(self,event): self.show['text'] = cos( + self.show['text'] + ) def Tan(self,event): self.show['text'] = tan( + self.show['text'] + ) def Asin(self,event): self.show['text'] = asin( + self.show['text'] + ) def Acos(self,event): self.show['text'] = acos( + self.show['text'] + ) def Atan(self,event): self.show['text'] = atan( + self.show['text'] + ) def clean(self, event): self.hi = None self.show['text'] = '' def delete(self,event): self.show['text'] = self.show['text'][:-1] def base64_en(self,event): try: self.show['text'] = base64.b64encode(bytes(self.show['text'].encode())) except: self.show['text'] = base64.b64encode(self.show['text']) def base64_de(self,event): try: self.show['text'] = base64.b64decode(self.show['text']).decode() except: self.show['text'] = base64 decode failed def Mortgage(self,event): self.master.destroy() myMortgage() def Rsa(self,event): #self.master.destroy() RSA() def extra_func(self,event): b = Button(self.p, text=ln, font=('Verdana', 20), width=6,bg='light blue') b.grid(row = 0 , column =5) b.bind('<Button-1>',self.Ln) b = Button(self.p, text=log, font=('Verdana', 20), width=6,bg='light blue') b.grid(row = 0 , column =6) b.bind('<Button-1>',self.Log) b = Button(self.p, text=e, font=('Verdana', 20), width=6,bg='orange') b.grid(row = 1 , column =5) b.bind('<Button-1>',self.num_e) b = Button(self.p, text=\u03c0, font=('Verdana', 20), width=6,bg='orange') b.grid(row = 1 , column =6) b.bind('<Button-1>',self.num_pi) b = Button(self.p, text=sin, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3,sticky=W) b.bind('<Button-1>',self.Sin) b = Button(self.p, text=cos, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3) b.bind('<Button-1>',self.Cos) b = Button(self.p, text=tan, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 2 , column =5,columnspan=3,sticky=E) b.bind('<Button-1>',self.Tan) b = Button(self.p, text=asin, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3,sticky=W) b.bind('<Button-1>',self.Asin) b = Button(self.p, text=acos, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3) b.bind('<Button-1>',self.Acos) b = Button(self.p, text=atan, font=('Verdana', 20), width=4,bg='light blue') b.grid(row = 3 , column =5,columnspan=3,sticky=E) b.bind('<Button-1>',self.Atan) b = Button(self.p, text=b64\u52a0, font=('Verdana', 20), width=6,bg='Silver') b.grid(row = 4 , column = 5 , sticky = w) b.bind('<Button-1>', self.base64_en) b = Button(self.p, text=b64\u89e3, font=('Verdana', 20), width=6,bg='Silver') b.grid(row = 4 , column = 6 , sticky = e) b.bind('<Button-1>', self.base64_de) b = Button(self.p, text=-> RSA, font=('Verdana', 20), width=12,bg='Silver',command=RSA) b.grid(row = 5 , column = 5, columnspan=3) root = Tk() myCalculator(root) root.title(myCalculator) root.mainloop()","title":"\u4ee3\u7801\u5b9e\u73b0"}]}